[{"path":[]},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement: Pedro L. Godoy Bethany Allen. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to palaeoverse","title":"Contributing to palaeoverse","text":"palaeoverse adopted set structures standards follow contributing development palaeoverse. like contribute palaeoverse toolkit, strongly advise reading document first. plan contribute function palaeoverse, first raise issue via GitHub repository. way development team can assess whether function suitable needed palaeoverse toolkit prior submission.","code":""},{"path":[]},{"path":"https://palaeoverse.palaeoverse.org/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"How to contribute","what":"Issues","title":"Contributing to palaeoverse","text":"Tasks need working logged issues repository. want get involved contributing palaeoverse don’t know start, great place identify tasks need working . can also contribute logging issues encountered typos, bugs, feature requests, etc. aim maintain list ‘Good First Issues’ specifically new contributors palaeoverse. Feel free find one unclaimed ‘Good First Issues’ interests , claim adding comment , jump !","code":""},{"path":"https://palaeoverse.palaeoverse.org/CONTRIBUTING.html","id":"minor-changes","dir":"","previous_headings":"How to contribute","what":"Minor changes","title":"Contributing to palaeoverse","text":"can fix typos, spelling mistakes, grammatical errors documentation directly GitHub, provided done source file. means ’ll need edit roxygen2 comments .R file, .Rd file.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CONTRIBUTING.html","id":"substantial-changes","dir":"","previous_headings":"How to contribute","what":"Substantial changes","title":"Contributing to palaeoverse","text":"like make substantial change, first file issue make sure someone development team agrees ’s needed. ’ve found bug, please file issue illustrates bug reproducible example.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CONTRIBUTING.html","id":"contribution-workflow-pull-request-process","dir":"","previous_headings":"How to contribute","what":"Contribution workflow (pull request process)","title":"Contributing to palaeoverse","text":"(contributor) fork repository (.e. palaeoverse R package) Clone desired repository personal computer changes made, create new git branch (.e. main branch) Keep branch sync Commit changes (make sure commit message concise) Push commits forked repository changes complete, submit changes merging via pull request (“PR”) GitHub Note complete pull request include succinct description (see function template) code changes , proper documentation (via roxygen2), unit tests (via testthat). description required initial pull request code review (see ), pull requests merged contain complete documentation tests. comfortable git/GitHub, can reach one core developers (see collaborators) via email can make pull request behalf. However, expected respond reviewer comments GitHub (see ). don’t feel comfortable implementing changes , can submit bug report feature request GitHub issue proper repository (e.g. palaeoverse issues).","code":""},{"path":"https://palaeoverse.palaeoverse.org/CONTRIBUTING.html","id":"code-review","dir":"","previous_headings":"","what":"Code review","title":"Contributing to palaeoverse","text":"pull requests must reviewed two core developers palaeoverse (see collaborators) merging. review process ensure contributions 1) meet standards expectations described , 2) successfully perform functions claim perform, 3) don’t break parts codebase. Submitting pull request one palaeoverse R packages automatically initiate R CMD check, lintr check, test coverage check via GitHub Actions. checks conduct automatic review ensure package broken new code code matches style guide (see ), manual review still required pull request can merged. Reviewers may questions reviewing pull request. expected respond questions via GitHub. fixes /changes required, expected make changes. required changes minor enough, reviewers may make , expected. questions lack background make required changes, work reviewer determine plan attack.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CONTRIBUTING.html","id":"community-space","dir":"","previous_headings":"","what":"Community space","title":"Contributing to palaeoverse","text":"appreciate GitHub platform everyone set Google Group palaeoverse R package can also discussed issues raised.","code":""},{"path":"https://palaeoverse.palaeoverse.org/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to palaeoverse","text":"Please note contributing palaeoverse agree Code Conduct.","code":""},{"path":"https://palaeoverse.palaeoverse.org/FUNDING.html","id":null,"dir":"","previous_headings":"","what":"Funding","title":"Funding","text":"development team like acknowledge thank financial support received.","code":""},{"path":"https://palaeoverse.palaeoverse.org/FUNDING.html","id":"id_2022","dir":"","previous_headings":"","what":"2022","title":"Funding","text":"Lewis . Jones: European Union’s Horizon 2020 research innovation program (grant agreement: 947921; MAPAS project) Sofía Galván: European Union’s Horizon 2020 research innovation program (grant agreement: 947921; MAPAS project) . Alessandro Chiarenza: European Union’s Horizon 2020 research innovation program (grant agreement: 947921; MAPAS project) Juan de la Cierva-formación fellowship (FJC2020-044836-/ MCIN /AEI / 10.13039 /501100011033) Bethany J. Allen: ETH+ Grant (BECCY project) Christopher D. Dean: Royal Society (grant number: RF_ERE_210013) Pedro L. Godoy: FAPESP Post-Doctoral fellowship (grant number: 2022/05697-9) William Gearty: Population Biology Program Excellence Postdoctoral Fellowship (University Nebraska-Lincoln) Lerner-Gray Postdoctoral Research Fellowship (American Museum Natural History). Cecily Nicholl: Royal Society (grant number: RGF_R1_180020) Miranta Kouvari: Royal Society (grant number: RGF_EA_180318)","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://palaeoverse.palaeoverse.org/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see http://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read http://www.gnu.org/philosophy/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://palaeoverse.palaeoverse.org/articles/phanerozoic-reefs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Latitudinal trends in Phanerozoic reefs","text":"palaeoverse R package developed palaeobiologists, palaeobiologists. aim package generate community-driven toolkit generic functions palaeobiological community. package provide implementations statistical analyses, rather provides auxiliary functions help streamline analyses improve code readability reproducibility. vignette (tutorial prefer) provided guide installation process functionality available within palaeoverse. , focus usage example looking latitudinal trends Phanerozoic reefs.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/phanerozoic-reefs.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"Latitudinal trends in Phanerozoic reefs","text":"palaeoverse package can installed via CRAN dedicated GitHub repository development version preferred. install via CRAN, simply use: install development version, first install devtools package, use install_github install palaeoverse directly GitHub. can now load palaeoverse using default library function: get onto good stuff, development team small request. use palaeoverse research, please cite associated publication. help us continue work supporting . can access appropriate citation via:","code":"install.packages(\"palaeoverse\") install.packages(\"devtools\") devtools::install_github(\"palaeoverse/palaeoverse\") library(palaeoverse) citation(\"palaeoverse\")"},{"path":"https://palaeoverse.palaeoverse.org/articles/phanerozoic-reefs.html","id":"using-the-package","dir":"Articles","previous_headings":"Introduction","what":"Using the package","title":"Latitudinal trends in Phanerozoic reefs","text":"Functions palaeoverse designed around assumption users’ data stored occurrence data.frame. , expected input data format functions. provide two example occurrence datasets (tetrapods reefs) within package different data sources. vignette, focus reefs dataset compilation Phanerozoic reef occurrences (n = 4,363) PaleoReefs Database (Kiessling & Krause, 2022). Note structure dataset. row contains unique occurrence column contains unique variable.","code":"# Load the dataset data(reefs) # View the first five rows & columns of reefs reefs[1:5, 1:5] ##   r_number               name             formation   system         series ## 1        1   Tilkideligi Tepe                       Triassic Upper Triassic ## 2        2              Hydra Pantokrator Limestone Triassic Upper Triassic ## 3        3 Shiraho, W-Pacific                        Neogene       Holocene ## 4        4 Aksu-Terziler area                       Triassic Upper Triassic ## 5        5    Adnet, Salzburg                       Triassic Upper Triassic"},{"path":"https://palaeoverse.palaeoverse.org/articles/phanerozoic-reefs.html","id":"lets-begin","dir":"Articles","previous_headings":"","what":"Let’s begin!","title":"Latitudinal trends in Phanerozoic reefs","text":"Reefs long considered good tracers past tropical subtropical conditions (Kiessling, 2001; Perrin & Kiessling, 2010). specifically, distribution historically used infer latitudinal extent tropical subtropical climatic conditions deep time. course oversimplification given know modern reefs systems engineers. However, purpose example, let’s get weighed finer details. example, use reefs dataset examine latitudinal trends Phanerozoic reefs demonstrate functionality available palaeoverse. Let’s start exploring dataset. conducting analyses, always good idea explore data understand working . Details related example datasets can accessed via usual documentation call: Let’s start exploring data little: bad (n = 4363), ’s quite bit data play ! Remember reefs (whole ecosystems), individual occurrences fossil organisms like tetrapods. much vary across time? can make use group_apply wrapper function run function across subsets data. Oh dear, ’ve just hit common issue… reef data conform common time scale! reefs resolved stage level, others resolved coarser finer temporal resolution. instances, regional names also used, international names used others. makes challenging make comparisons time… one solution use age values bin reefs time bins, age range data provided dataset (.e. “max_ma” “min_ma”). must therefore use names interval link common time scale, ‘International Geological Stages’ established International Commission Stratigraphy (ICS). Fortunately, can make use look_up function . function can used assign international geological stages numeric ages occurrences, use user-defined interval key link common time scale. , use example interval_key available palaeoverse assign international geological stage names numeric ages. Great! now common time scale numeric ages. However, reefs seem range several stages can’t count just early late stage. data still need binned. Let’s check time_bins bin_time functions. Note number rows reefs now increased. “” method bin_time duplicates occurrence every bin age range overlaps . Let’s check reef numbers time using binned data: ’s like ! , let’s forget ’s always useful visualise data. don’t plot number reefs time? can even make use axis_geo function add Geological Time Scale plot. plot chunk n-reef () course want explore data little . However, sake brevity, let’s focus research theme: latitudinal trends Phanerozoic reefs. studying modern latitudinal trends (e.g. biodiversity), researchers can use geographic coordinates samples conduct analyses. However, continents shift time, palaeobiologists must reconstruct palaeogeographic coordinates fossil localities. , plate rotation models used (e.g. PALEOMAP model) rotate modern coordinates fossil localities location time deposition. palaeorotate function allows user using either ‘point’ ‘grid’ method. first approach makes use GPlates Web Service allows point data rotated specific ages using available models (see GPlates Web Service documentation). second approach uses reconstruction files pre-generated palaeocoordinates spatiotemporally link occurrences’ modern coordinates age estimates respective palaeocoordinates. Let’s give shot: Now let’s plot palaeolatitudinal distribution! plot chunk reefs-dist Neat! ’s hard draw trends data (lot !). can better… let’s summarise information… assume reefs broadly limited tropical subtropical climatic conditions, poleward reef time bin give us estimate palaeolatitudinal extent climatic conditions. plot chunk reefs-max ’s definitely much clearer! stop ? Well… one last thing… let’s consider plate rotation model choice might impact results using three different models: GOLONKA, PALEOMAP, MERDITH2021 (Wright et al. 2013; Scotese & Wright, 2018; Merdith et al. 2021). Now ’ve palaeorotated data, let’s repeat earlier calculate poleward reef occurrence model. plot chunk reefs-max-multi leave make conclusions… Hopefully vignette shown potential uses palaeoverse functions helped provide workflow analyses. questions package functionality, please feel free join Palaeoverse Google group leave question; ’ll aim answer soon possible!","code":"# Call documentation for dataset ?reefs # You can also use help(reefs) # How many reefs are there in the dataset? # Each row represents an individual reef. nrow(reefs) ## [1] 4363 # How many reefs per interval? # Let's group by the interval column to test reef_counts <- group_apply(occdf = reefs, group = \"interval\", fun = nrow) head(reef_counts) ##   nrow                interval ## 1    2       (early?) Toarcian ## 2    1       Aalenian-Bajocian ## 3    4       Aalenian/Bajocian ## 4    1 Aalenian/lower Bajocian ## 5    1               Abadehian ## 6    6                Aeronian # Load the interval key data(\"interval_key\") # Assign a common time scale based on an interval key reefs <- look_up(occdf = reefs,                  early_interval = \"interval\",                  late_interval = \"interval\",                  int_key = interval_key) # Example output reefs[100:110, 15:19] ##     early_stage late_stage interval_max_ma interval_mid_ma interval_min_ma ## 100    Ladinian    Carnian           242.0          234.50           227.0 ## 101      Norian     Norian           227.0          217.75           208.5 ## 102    Rhaetian   Rhaetian           208.5          204.90           201.3 ## 103    Ladinian    Carnian           242.0          234.50           227.0 ## 104      Norian   Rhaetian           227.0          214.15           201.3 ## 105     Anisian    Anisian           247.2          244.60           242.0 ## 106    Rhaetian   Rhaetian           208.5          204.90           201.3 ## 107  Sinemurian Sinemurian           199.3          195.05           190.8 ## 108   Oxfordian  Oxfordian           163.5          160.40           157.3 ## 109   Tithonian  Tithonian           152.1          148.55           145.0 ## 110   Tithonian  Tithonian           152.1          148.55           145.0 # Now we have numeric ages for our data, we can easily # remove pre-Phanerozoic data to focus our study reefs <- subset(reefs, interval_max_ma <= 541) # Extract Phanerozoic stage-level stages for time bins bins <- time_bins(interval = \"Phanerozoic\", rank = \"stage\") # Bin data # bin_time requires \"max_ma\" and \"min_ma\" columns # Rename columns in reefs colnames(reefs)[which(colnames(reefs) == \"interval_max_ma\")] <- \"max_ma\" colnames(reefs)[which(colnames(reefs) == \"interval_min_ma\")] <- \"min_ma\" # Five methods exist in bin_time for binning occurrence data # You can see details on each via ?bin_time # Bin by midpoint age bin_time(occdf = reefs, bins = bins, method = \"mid\") # Bin by overlap majority bin_time(occdf = reefs, bins = bins, method = \"majority\") # Bin into every bin within age range bin_time(occdf = reefs, bins = bins, method = \"all\") # Bin randomly into bins within age range (equal probability) bin_time(occdf = reefs, bins = bins, method = \"random\", reps = 10) # Bin randomly into bins within age range (uniform probability) bin_time(occdf = reefs, bins = bins, method = \"point\", reps = 10) # Let's go with \"all\" for this example! reefs <- bin_time(occdf = reefs, bins = bins, method = \"all\") # Count number of occurrences per interval reefs_time <- group_apply(occdf = reefs, group = \"interval_mid_ma\", fun = nrow) # Check output head(reefs_time) ##   nrow interval_mid_ma ## 1    9         0.00585 ## 2   85         0.07035 ## 3   10         0.39285 ## 4   17          0.4515 ## 5   68         1.29585 ## 6    9          1.3545 # Plot data plot(x = reefs_time$interval_mid_ma,      y = reefs_time$nrow,      xlab = \"Time (Ma)\",      ylab = \"Number of reefs per stage\",      xlim = c(541, 0),      xaxt = \"n\",      type = \"b\", pch = 20) # Add axis of the geological time scale axis_geo(side = 1, intervals = \"periods\") # Palaeorotate occurrences reefs <- palaeorotate(occdf = reefs, age = \"bin_midpoint\",                       method = \"point\", model = \"PALEOMAP\") # Check palaeocoordinates head(reefs[, c(\"p_lng\", \"p_lat\")]) ##     p_lng   p_lat ## 1 21.3630 10.0755 ## 2 22.1341  2.3106 ## 3      NA      NA ## 4      NA      NA ## 5      NA      NA ## 6 26.3041 -0.3093 # Plot data plot(x = reefs$bin_midpoint,      y = reefs$p_lat,      xlab = \"Time (Ma)\",      ylab = \"Palaeolatitude (\\u00B0)\",      xlim = c(541, 0),      xaxt = \"n\",      type = \"p\", pch = 20) axis_geo(side = 1, intervals = \"periods\") # Let's first assume hemispheric symmetry and convert # palaeolatitudes to absolute palaeolatitudes reefs$p_lat <- abs(reefs$p_lat) # Now we can calculate the most poleward latitude per time bin # Extract unique interval midpoints midpoints <- sort(unique(reefs$bin_midpoint)) # Calculate the maximum palaeolatitude for each time bin reefs_max <- sapply(X = midpoints, FUN = function(x) {   max(reefs[which(reefs$bin_midpoint == x), ]$p_lat, na.rm = TRUE) } ) # Plot data plot(x = midpoints,      y = reefs_max,      xlab = \"Time (Ma)\",      ylab = \"Palaeolatitude (\\u00B0)\",      xlim = c(541, 0),      xaxt = \"n\",      type = \"b\",      pch = 20) # Add axis of the geological time scale axis_geo(side = 1, intervals = \"periods\") # We can call multiple models at once with palaeorotate # First, let's define the models... models <- c(\"GOLONKA\", \"PALEOMAP\", \"MERDITH2021\") # And now palaeorotate! reefs <- palaeorotate(occdf = reefs, age = \"bin_midpoint\",                       method = \"point\", model = models) # Check palaeocoordinates # When multiple models are called, the name of the model # is added as a suffix to p_lng and p_lat head(reefs[, c(\"p_lng_PALEOMAP\", \"p_lat_PALEOMAP\",                \"p_lng_GOLONKA\", \"p_lat_GOLONKA\",                \"p_lng_MERDITH2021\", \"p_lat_MERDITH2021\")]) ##   p_lng_PALEOMAP p_lat_PALEOMAP p_lng_GOLONKA p_lat_GOLONKA p_lng_MERDITH2021 p_lat_MERDITH2021 ## 1        21.3630        10.0755       35.6565        8.3384           34.4223           12.1964 ## 2        22.1341         2.3106       31.0982        4.8069           30.8863            4.7404 ## 3             NA             NA      124.2500       24.3330          124.2489           24.3367 ## 4             NA             NA      124.2500       24.3330          124.2493           24.3352 ## 5             NA             NA      124.2500       24.3330          124.2498           24.3337 ## 6        26.3041        -0.3093       38.0979        4.9270           36.3998            4.5809 # Let's code a little helper function to begin with. # This is generally useful when repeating code several times! p_lat_max <- function(occdf, midpoint, p_lat) {   # Get absolute palaeolatitudes   occdf[, p_lat] <- abs(occdf[, p_lat])   # Extract unique bin midpoints   midpoints <- sort(unique(occdf[, midpoint]))   # Calculate maximum palaeolatitude for each bin   lat_max <- sapply(X = midpoints, FUN = function(x) {     max(occdf[which(occdf[, midpoint] == x), ][, p_lat], na.rm = TRUE)   })   # Bind data   lat_max <- cbind.data.frame(midpoints, lat_max)   # Return df   return(lat_max) } # Calculate maximum palaeolatitude of reefs for each time bin for each model paleomap <- p_lat_max(occdf = reefs,                       midpoint = \"bin_midpoint\",                       p_lat = \"p_lat_PALEOMAP\") golonka <- p_lat_max(occdf = reefs,                      midpoint = \"bin_midpoint\",                      p_lat = \"p_lat_GOLONKA\") merdith <- p_lat_max(occdf = reefs,                      midpoint = \"bin_midpoint\",                      p_lat = \"p_lat_MERDITH2021\") # Set up plot plot(x = NULL,      y = NULL,      xlab = \"Time (Ma)\",      ylab = \"Palaeolatitude (\\u00B0)\",      xlim = c(541, 0),      ylim = c(0, 90),      xaxt = \"n\") # Plot maximum palaeolatitudes for each model lines(x = paleomap$midpoints, y = paleomap$lat_max,       type = \"o\", col = \"#e41a1c\", pch = 15) lines(x = golonka$midpoints, y = golonka$lat_max,       type = \"o\", col = \"#377eb8\", pch = 16) lines(x = merdith$midpoints, y = merdith$lat_max,       type = \"o\", col = \"#4daf4a\", pch = 17) # Add legend legend(530, 15, legend=c(\"PALEOMAP\", \"GOLONKA\", \"MERDITH2021\"),        col = c(\"#e41a1c\", \"#377eb8\", \"#4daf4a\"),        lty = 1, pch = c(15, 16, 17), bty = \"n\") # Add geological time scale axis axis_geo(side = 1, intervals = \"periods\")"},{"path":"https://palaeoverse.palaeoverse.org/articles/phanerozoic-reefs.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Latitudinal trends in Phanerozoic reefs","text":"Kiessling, W. (2001). Paleoclimatic significance Phanerozoic reefs. Geology 29, 751–754. Perrin, C. & Kiessling, W. (2010) Latitudinal trends Cenozoic reef patterns relationship climate. Carbonate Syst. Oligocene–Miocene Clim. Transit. 17–33. Kiessling, W. & Krause, M. C. (2022). PaleoReefs Database (PARED) (1.0) Data set. DOI: 10.5281/zenodo.6037852. Merdith, ., Williams, S.E., Collins, .S., Tetley, M.G., Mulder, J.., Blades, M.L., Young, ., Armistead, S.E., Cannon, J., Zahirovic, S., Müller. R.D. (2021). Extending full-plate tectonic models deep time: Linking Neoproterozoic Phanerozoic. Earth-Science Reviews, 214(103477). DOI: 10.1016/j.earscirev.2020.103477. Scotese, C., & Wright, N. M. (2018). PALEOMAP Paleodigital Elevation Models (PaleoDEMs) Phanerozoic. PALEOMAP Project. Wright, N., Zahirovic, S., Müller, R. D., & Seton, M. (2013). Towards community-driven paleogeographic reconstructions: integrating open-access paleogeographic paleobiology data plate tectonics. Biogeosciences, 10(3), 1529-1541. DOI: 10.5194/bg-10-1529-2013.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Contributing to palaeoverse: structure and standards","text":"palaeoverse R package community-driven software library providing generic tools palaeobiological analysis. core principles palaeoverse : (1) streamline analyses, (2) enhance code readability, (3) improve reproducibility results. document describes essential structure conventions palaeoverse R package. Naturally, always disagreements regarding best practices conventions, palaeoverse exception. Despite , essentials palaeoverse encouraged make lives developer, user, easier. worth noting core structure conventions adopted palaeoverse heavily influenced Hadley Wickham Jenny Bryan’s R Packages tidyverse style guide, currently also Google’s guide. “Good coding style like correct punctuation: can manage without , butitsuremakesthingseasiertoread.” – tidyverse style guide","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"files","dir":"Articles","previous_headings":"","what":"Files","title":"Contributing to palaeoverse: structure and standards","text":"File names always concise, meaningful end '.R'. Avoid using special characters whenever possible (.e. stick letters numbers), use '_' '-' instead spaces file names. use lowercase also strongly encouraged, never file names differ capitalization. Note: preferred separator '_' consist ‘lowercase snake_case’ convention developing functions (later!).","code":"# Nein! Sup3rAw3sumFuncti0n.r  # Besser super_awesome_function.R  # Das ist gut! time_bins.R"},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"r-style-guide","dir":"Articles","previous_headings":"","what":"R style guide","title":"Contributing to palaeoverse: structure and standards","text":"recommend using following conventions make code easier us (community) understand use: Assigning: use arrows (<-) rather equals sign assign. Comments: please explain code comprehensively using comments (#) help us understand intentions review code. Packages: please use external packages (.e. dependencies) possible, package likely break alterations made ; code uses packages, load start script (.e. tutorials examples). transparent user various packages sprinkled throughout code. Progress: code may take long time run (minute), include progress bar 'txtProgressBar()' function. Sections: use lines ‘-’ ‘=’ indicate section breaks. hard provide exact details long section break . However, tend think paragraphs code. Tip: RStudio, can use '# SECTION NAME ###' make section interpreted outline feature. can also make subsections adding '#\" section name. using RStudio, can also use keyboard shortcut Cmd/Ctrl + Shift + R. Spacing: add spaces code make human-readable. Objects: use object names short relevant contents, ideally ‘lowercase snake_case’. Wrapping: break long commands multiple lines, conventionally line longer ~75–80 characters. Language: use plain English (British spelling preferred, required) code documentation.","code":"# Nope! x = 1 y<-x+1  # Awesome! x <- 1 y <- x + 1"},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Contributing to palaeoverse: structure and standards","text":"Often might want include data palaeoverse. might come form example datasets testing functions (e.g. fossil occurrences), reference datasets Geological Timescale 2020, even data fundamental function run. palaeoverse’s structure, currently recognize four main ways including data package depending usage. Raw data Internal data Exported data External data (preferred option) However, sake file size efficiency, please include data variables files used function. Note: order released CRAN, R packages must less 5 MB size. Please include data absolutely vital function. preferred solution including data palaeoverse functions calling data via API download URL (.e. external data).","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"raw-data","dir":"Articles","previous_headings":"Data","what":"Raw data","title":"Contributing to palaeoverse: structure and standards","text":"Raw data always included inst/extdata. want include cleaned/processed data data/, generally good idea include code used process raw data. ever need reproduce update cleaned data, save precious time. code processing data included data-raw/. Strictly speaking, raw data need documented. However, good idea include original source version (including download date) code.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"internal-data","dir":"Articles","previous_headings":"Data","what":"Internal data","title":"Contributing to palaeoverse: structure and standards","text":"Data wish directly make available user saved R/sysdata.rda. best option pre-computed data tables needed function run. Strictly speaking internal data need documented. However, good idea document internal data function documentation.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"exported-data","dir":"Articles","previous_headings":"Data","what":"Exported data","title":"Contributing to palaeoverse: structure and standards","text":"Package data wish make available user stored data/. file directory either '.rda' '.RData'. file type fast, small explicit. appropriate way include exported data use usethis::use_data(). using large datasets, want ensure files bloated taking much space users’ machines. , may want experiment compression settings usethis::use_data(). Generally, xz gzip can create smaller files default bzip2. can also implement several ‘hacks’ generate smaller files may want consider large datasets (depending whether data sensitive changes). Data many decimal places consume lot memory, consider many significant figures relevant data, round() accordingly. can also experiment file size multiplying data X (e.g. 1,000) remove decimal places altogether. Note: Remember undo transformations calling working data.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"external-data","dir":"Articles","previous_headings":"Data","what":"External data","title":"Contributing to palaeoverse: structure and standards","text":"External data preferred approach contributors include data palaeoverse required almost cases. ensure package become unnecessary bloated users data can just called download link. Currently, external data stored GitHub repo (reconstruction files palaeorotate). likely future migrated elsewhere GitHub data repository (hopefully dedicated server funding allows!). wish include external data, please get touch one palaeoverse developers, can discuss might best solution.","code":"#generate temp directory files <- tempdir() #download files download.file(url = \"www.goo.com\", destfile = paste0(files, \"/mgoo.csv\")) #run some kind function using the download #REMEMBER: remove downloaded files unlink(x = paste0(files, \"/\", list.files(files)))"},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"data-documentation","dir":"Articles","previous_headings":"Data","what":"Data documentation","title":"Contributing to palaeoverse: structure and standards","text":"Objects data/ always exported default, documented accordingly. order properly document data, must document name dataset save R/data. example, documentation block used document GTS2020 saved R/data.R similar following (simplified ):","code":"#' Geological Time Scale 2020 #' #' A dataset of the Geological Time Scale 2020. Age data from: #'  \\url{https://stratigraphy.org/timescale/}. #' Supplementary information is also included in the dataset for #' plotting functionality (e.g. GTS2020 colour scheme). #' #' @format A data frame with 189 rows and 20 variables: #' \\describe{ #'   \\item{index}{Index number for the order of all intervals in the dataset} #'   \\item{stage_number}{Index number for stages} #'   \\item{series_number}{Index number for series} #'   \\item{system_number}{Index number for system} #'   \\item{interval_name}{Names of intervals in the dataset} #'   ... #' } #' @section References: #' Gradstein, F.M., Ogg, J.G., Schmitz, M.D. and Ogg, G.M. eds. (2020). #' Geologic time scale 2020. Elsevier. #' @source Compiled by Lewis A. Jones. See item descriptions for details. \"GTS2020\""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"what-does-it-mean-to-document-your-data","dir":"Articles","previous_headings":"Data","what":"What does it mean to document your data?","title":"Contributing to palaeoverse: structure and standards","text":"Documenting data provide thorough description data information relevant understanding . Good documentation key reproducible science, also help us ensure acknowledge data collators provided data palaeoverse package. providing us datasets, please give following information: Author(s): collected data, prepared current format? Please provide citations relevant. authors given permission dataset included palaeoverse package? Description: Brief description dataset. Provenance: data collected? dataset finalised current form? Size: Please state full, uncompressed size file. Variables: Describe columns dataset, providing much information can full name variable, data type (e.g. continuous, discrete, categoric, etc.), units, collected.","code":""},{"path":[]},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"conventions","dir":"Articles","previous_headings":"Functions","what":"Conventions","title":"Contributing to palaeoverse: structure and standards","text":"Functions saved '.R' files 'R' folder. name file needs correspond function, e.g. file time_bins.R contains function time_bins(). Function names arguments informative aim keep line available functions palaeoverse. example, functions bin data, whether time space, start bin_, whereas taxonomic-related functions start tax_ (e.g. tax_unique, tax_check). possible, argument names also consist functions package. example, function requires occurrence dataframe input, argument name occdf. difficult give complete static summary conventions palaeoverse undoubtedly evolve time. also wish remain flexible contributors, provided compromise user-friendliness package. welcome contributors check source code palaeoverse function examples.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"documentation","dir":"Articles","previous_headings":"Functions","what":"Documentation","title":"Contributing to palaeoverse: structure and standards","text":"documentation, use roxygen2. title, brief description, every argument (including input class default input) output function need documented roxygen2 style, example: Add '@export' namespace tag make function available. get started roxygen2, set working directory package directory, directory store function '.R' file. R command devtools::document() creates ‘man’ folder directory, contains '.Rd' file corresponding documented function. Opening file RStudio, can create preview see documentation looks like. implemented changes, rebuild documentation file Ctrl+Shift+B devtools::document().","code":"#' An exemplary function #' This function is used to demonstrate the documentation of functions. #' @param example \\code{character}. Arguments are the function inputs. #' @param another_example \\code{logical}. All arguments need to be documented. #' @return A \\code{list} is returned as output in this example function. #' @details Describe more details if necessary, and list sources if applicable. #' @section Developer: #' Your name #' @section Reviewer: #' Name(s) #' @examples #' #Show off the example function #' example_function(example = “documentation”, another_example = TRUE) #' @export"},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"efficiency","dir":"Articles","previous_headings":"Functions","what":"Efficiency","title":"Contributing to palaeoverse: structure and standards","text":"possible, make coding decisions ensure code maximally efficient - make big difference users want apply function large dataset. general examples include: Using functions 'apply' family can faster -loops. However, -loop almost always reader-friendly, try balance two! Storing objects lists, lists lists, rather data frames inside functions Vectorise, possible. way function can operate elements vector without needing loop element. Avoiding using rbind() cbind() compile objects row-wise column-wise within -loops; specifying row column number using iteration number usually faster alternative. However, please don’t let deter - welcome submissions R users experience levels, team -house code evaluators can help concerns efficiency.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"error-messages","dir":"Articles","previous_headings":"Functions","what":"Error messages","title":"Contributing to palaeoverse: structure and standards","text":"ensure functions used appropriately, error messages generated function receiving input designed . Error messages consist brief description went wrong. Sometimes makes sense specify went wrong, kind input expected. Optionally, error messages can include hints guide user towards correct input. Examples error messages include input wrong format, e.g. “Error: 'x' must numeric vector.” input wrong dimension, e.g. “Error: 'x' must data.frame two columns.” input without mandatory names, e.g. “Error: 'x' column 'stage'. 'x' must data.frame columns 'stage' 'age'.” implement error messages R, stop() function can used:","code":"# Generate error message if (!is.numeric(x)) {   stop(\"Error: 'x' must be a numeric vector.\") }"},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"warning-messages","dir":"Articles","previous_headings":"Functions","what":"Warning messages","title":"Contributing to palaeoverse: structure and standards","text":"general, try minimise use warning messages palaeoverse can easily ignored user, completely skipped pipeline analyses (see ?). However, things life, time place. , use warning() generally discouraged throwing error suffice, allow use warning messages palaeoverse, appropriate. Warning messages can useful providing additional information user function output. example, palaeorotate function provide warning users one points reconstructed due georeferenced plate existing desired time reconstruction. implement warning messages R, warning() function can used:","code":"# Generate warning message if (!is.numeric(x)) {   warning(\"Warning: 'x' must be a numeric vector.\") }"},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"tests","dir":"Articles","previous_headings":"Functions","what":"Tests","title":"Contributing to palaeoverse: structure and standards","text":"Testing perhaps one important parts developing function. already, recommend reading Chapter 12–Testing ‘R packages’ continuing palaeoverse follows guidance. function can added palaeoverse, needs go formal testing. required hopefully function popular, need ensure behaves expected avoid issues. , make use R package testthat. initial setup function testing testthat already established palaeoverse, directory 'tests/testthat/'. organisation test files must match 'R/' files palaeoverse. example, function time_bins() saved time_bins.R R/ directory, associated test file 'test-time_bins.R' 'tests/testthat' directory. ensures associated function testing clear. Tip: usethis package provides helpful pair functions creating/alternating files: usethis::use_r() usethis::use_test() Make sure create enough tests within .R file cover possible variants function. includes creating tests cover optional arguments majority options arguments (required arguments). Remember, even personally use function particular reason, must attempt cover majority edge cases may arise allowed function. Related tests bundled within test_that() calls combined strings text identify broad reason bundle tests (e.g., testing function works particular type data). Finally, tests rely data packages outside palaeoverse community must , skipped data packages available. Ultimately, aim >90% code coverage (95% preferred), means 90% lines code codebase tested least one test. Pushing code GitHub trigger code coverage check, alert whether need write tests.","code":"# Test expected outcome is equal to actual outcome test_that(\"time_bins() works\", {   expect_equal(nrow(time_bins(interval = c(\"Maastrichtian\"))), 1) })"},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"contributing-to-palaeoverse","dir":"Articles","previous_headings":"","what":"Contributing to palaeoverse","title":"Contributing to palaeoverse: structure and standards","text":"palaeoverse adopted set structures standards follow contributing development palaeoverse. like contribute palaeoverse toolkit, strongly advise reading document first. plan contribute function palaeoverse, first raise issue via GitHub repository (see ). way development team can assess whether function suitable needed palaeoverse toolkit prior submission.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"git-and-github","dir":"Articles","previous_headings":"Contributing to palaeoverse","what":"Git and GitHub","title":"Contributing to palaeoverse: structure and standards","text":"use git via Github (palaeoverse GitHub umbrella) manage R code data. familiar tools, excellent free resources available online: Setting git within RStudio (short) Collaborating R git GitHub (50 min. youtube video) Git GitHub R packages (medium length) comprehensive guide git R (long)","code":""},{"path":[]},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"minor-changes","dir":"Articles","previous_headings":"Contributing to palaeoverse > How to contribute","what":"Minor changes","title":"Contributing to palaeoverse: structure and standards","text":"can fix typos, spelling mistakes, grammatical errors documentation directly GitHub, provided done source file. means ’ll need edit roxygen2 comments .R file, .Rd file.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"substantial-changes","dir":"Articles","previous_headings":"Contributing to palaeoverse > How to contribute","what":"Substantial changes","title":"Contributing to palaeoverse: structure and standards","text":"like make substantial change, first file issue make sure someone development team agrees ’s needed. ’ve found bug, please file issue illustrates bug reproducible example.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"pull-request-process","dir":"Articles","previous_headings":"Contributing to palaeoverse > How to contribute","what":"Pull request process","title":"Contributing to palaeoverse: structure and standards","text":"(contributor) clone desired repository (.e. palaeoverse R package) personal computer. changes made, switch new git branch (.e., main branch). changes complete, can submit changes merging via pull request (“PR”) GitHub. Note complete pull request include succinct description (see function template) code changes , proper documentation (via roxygen2), unit tests (via testthat). description required initial pull request code review (see ), pull requests merged contain complete documentation tests. comfortable git/GitHub, can reach one core developers (see collaborators) via email can make pull request behalf. However, expected respond reviewer comments GitHub (see ). don’t feel comfortable implementing changes , can submit bug report feature request GitHub issue proper repository (e.g. palaeoverse issues).","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/structure-and-standards.html","id":"code-review","dir":"Articles","previous_headings":"Contributing to palaeoverse","what":"Code review","title":"Contributing to palaeoverse: structure and standards","text":"pull requests must reviewed two core developers palaeoverse (see collaborators) merging. review process ensure contributions 1) meet standards expectations described , 2) successfully perform functions claim perform, 3) don’t break parts codebase. Submitting pull request palaeoverse package automatically initiate R CMD check, lintr check, test coverage check via GitHub Actions. checks conduct automatic review ensure package broken new code code matches style guide (see ), manual review still required pull request can merged. Reviewers may questions reviewing pull request. expected respond questions via GitHub. fixes /changes required, expected make changes. required changes minor enough, reviewers may make , expected. questions lack background make required changes, work reviewer determine plan attack.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/tetrapod-biodiversity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Alpha diversity and geographic range size of Carboniferous and Permian tetrapods","text":"palaeoverse R package developed palaeobiologists, palaeobiologists. aim package generate community-driven toolkit generic functions palaeobiological community. package provide implementations statistical analyses, rather provides auxiliary functions help streamline analyses improve code readability reproducibility. vignette (tutorial prefer) provided guide installation process functionality available within palaeoverse. , focus usage example looking various trends tetrapods across Carboniferous/Permian boundary.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/tetrapod-biodiversity.html","id":"installation","dir":"Articles","previous_headings":"Introduction","what":"Installation","title":"Alpha diversity and geographic range size of Carboniferous and Permian tetrapods","text":"palaeoverse package can installed via CRAN dedicated GitHub repository development version preferred. install via CRAN, simply use: install development version, first install devtools package, use install_github install palaeoverse directly GitHub. can now load palaeoverse using default library function: get onto good stuff, development team small request. use palaeoverse research, please cite associated publication. help us continue work supporting . can access appropriate citation via:","code":"install.packages(\"palaeoverse\") install.packages(\"devtools\") devtools::install_github(\"palaeoverse/palaeoverse\") library(palaeoverse) citation(\"palaeoverse\")"},{"path":"https://palaeoverse.palaeoverse.org/articles/tetrapod-biodiversity.html","id":"now-that-thats-out-of-the-way-lets-begin","dir":"Articles","previous_headings":"Introduction","what":"Now that that’s out of the way, let’s begin!","title":"Alpha diversity and geographic range size of Carboniferous and Permian tetrapods","text":"Carboniferous early Permian regarded critical intervals early four-limbed vertebrates, terms diversification biogeography. time several major groups tetrapods emerged (including crown amniotes), extensive tropical rainforests Carboniferous gave way dryland vegetation Permian, ’s known ‘Carboniferous Rainforest Collapse’ (CRC) (information, see Dunne et al., 2018). vignette ’ll use tetrapods dataset demonstrate use palaeoverse functions examine alpha diversity range size vary across interval.","code":""},{"path":"https://palaeoverse.palaeoverse.org/articles/tetrapod-biodiversity.html","id":"the-tetrapods-dataset","dir":"Articles","previous_headings":"","what":"The Tetrapods Dataset","title":"Alpha diversity and geographic range size of Carboniferous and Permian tetrapods","text":"Functions palaeoverse designed around assumption users’ data stored occurrence data.frame. , expected input data format functions. provide two example occurrence datasets (tetrapods reefs) within package different data sources. two datasets similar structures, data (variables) available differ. tetrapods dataset compilation Carboniferous–Early Triassic tetrapod occurrences (n = 5,270) Paleobiology Database. ’ll using dataset demonstrate available functionality palaeoverse. Let’s get started exploring dataset. can see, variety variables play around ! vignette ’ll mostly focusing spatial information, latitude longitude. first, need data prep…","code":"# Call the dataset: data(tetrapods)  # View the column names and the first five lines of the first three columns: colnames(tetrapods) ##  [1] \"occurrence_no\"     \"collection_no\"     \"identified_name\"   \"identified_rank\"   \"accepted_name\"     ##  [6] \"accepted_rank\"     \"early_interval\"    \"late_interval\"     \"max_ma\"            \"min_ma\"            ## [11] \"phylum\"            \"class\"             \"order\"             \"family\"            \"genus\"             ## [16] \"abund_value\"       \"abund_unit\"        \"lng\"               \"lat\"               \"collection_name\"   ## [21] \"cc\"                \"formation\"         \"stratgroup\"        \"member\"            \"zone\"              ## [26] \"lithology1\"        \"environment\"       \"pres_mode\"         \"taxon_environment\" \"motility\"          ## [31] \"life_habit\"        \"diet\" tetrapods[1:5, 1:3] ##   occurrence_no collection_no                        identified_name ## 1        146665         12943     n. gen. Anconastes n. sp. vesperus ## 2        147090         13004                     Gorgonopsia indet. ## 3        147521         13043 n. gen. Procolophon n. sp. trigoniceps ## 4        147523         13044       n. gen. Ophiodeirus n. sp. casei ## 5        147563         13046         Broiliellus n. sp. arroyoensis"},{"path":"https://palaeoverse.palaeoverse.org/articles/tetrapod-biodiversity.html","id":"exploring-the-functions","dir":"Articles","previous_headings":"","what":"Exploring the functions","title":"Alpha diversity and geographic range size of Carboniferous and Permian tetrapods","text":"’re looking patterns tetrapod diversity distribution Carboniferous Permian, ’ll first bin occurrences time space. can easily functions palaeoverse package. Let’s first look binning time. two palaeoverse functions help us assign occurrences different intervals, ‘bins’, time. First, ’ll use time_bins make suitable time bins study. function requires maximum minimum time interval run. know ’re interested looking Carboniferous Permian, can use intervals get suitable stage-level bins ’re : can bin occurrences time bins, need ages occurrences millions years. Since numeric ages may changed since downloaded data PBDB, ’ll use look_up get numeric ages occurrences within tetrapods dataset based assigned interval names: can see ’ve got new columns updated interval ages. Handy! Now ’re ready bin occurrences time bins using bin_time. now, ’ll go ‘mid’ method, ’ll talk minute. Oh ! ’ve hit error. ’s occurrences sit outside time intervals ’re interested . bin_time can’t bin occurrences sit outside time intervals ’ve chosen, work, ’ll first remove occurrences. ’s better! Let’s see dataset changed. can see, four new columns (variables) added dataset. Two especially important. First bin_assignment, shows number bin occurrence added . Second n_bins - shows many bins occurrence potentially placed within. Let’s examine . can see, ~25% dataset can assigned just one bin - occurrences can’t confidently assigned individual time interval. methods bin_time function come handy. provide user different options assigning occurrences bins. Instead ‘mid’ method, let’s try ‘majority’ method instead, places occurrences bin covers majority potential time range. ’d recommend playing around different options seeing impact results! Next, ’ll also bin occurrences spatially. need couple functions . Firstly, need add palaeocoordinates dataset. can use palaeorotate function . Now let’s check ’s worked… Looks good ! Now palaeocoordinates occurrences, can put spatial bins. can using bin_space function, assigns occurrence one many discrete equal-area hexagonal grid cells (based Uber’s H3 system). bin_space adds new columns, including one unique grid cell ID, well latitudinal longitudinal coordinates centroid cell. Now temporal spatial bins, can use data see spatial coverage tetrapod fossils dataset varies time. Let’s save now move analyses!","code":"# Generate time bins bins <- time_bins(interval = c(\"Carboniferous\", \"Permian\"),                   rank = \"stage\",                   scale = \"GTS2012\",                   plot = FALSE)  head(bins) ##   bin interval_name  rank max_ma mid_ma min_ma duration_myr abbr  colour  font ## 1   1   Tournaisian stage  358.9 352.80  346.7         12.2    T #8CB06C black ## 2   2        Visean stage  346.7 338.80  330.9         15.8    V #A6B96C black ## 3   3  Serpukhovian stage  330.9 327.05  323.2          7.7   Se #BFC26B black ## 4   4    Bashkirian stage  323.2 319.20  315.2          8.0    B #99C2B5 black ## 5   5     Moscovian stage  315.2 311.10  307.0          8.2    M #B3CBB9 black ## 6   6    Kasimovian stage  307.0 305.35  303.7          3.3   Ka #BFD0C5 black # Get new numeric ages for named intervals using the interval key that is supplied with Palaeoverse tetrapods <- look_up(tetrapods, int_key = interval_key)  # Make sure that any values which could not be matched contain their original values tetrapods$interval_max_ma <- ifelse(is.na(tetrapods$interval_max_ma),                                     tetrapods$max_ma,                                     tetrapods$interval_max_ma) tetrapods$interval_min_ma <- ifelse(is.na(tetrapods$interval_min_ma),                                     tetrapods$min_ma,                                     tetrapods$interval_min_ma) tetrapods$interval_mid_ma <- (tetrapods$min_ma + tetrapods$max_ma)/2  # Look at the updated dataset tetrapods[1:5, 35:37] ##   interval_max_ma interval_mid_ma interval_min_ma ## 1         307.000         302.400          298.90 ## 2         265.100         262.500          259.10 ## 3         251.902         249.685          247.20 ## 4         290.100         284.700          283.50 ## 5         283.500         275.800          272.95 # Rename columns so that new intervals are used for binning colnames(tetrapods)[9:10] <- c(\"old_max_ma\", \"old_min_ma\") colnames(tetrapods)[c(35, 37)] <- c(\"max_ma\", \"min_ma\")  # Generate time bins tetrapods <- bin_time(occdf = tetrapods,                       bins = bins,                       method = 'mid') ## Error in bin_time(occdf = tetrapods, bins = bins, method = \"mid\"): Minimum age of occurrence data is less than minimum age of bins. # Remove occurrences that are younger than the time intervals we're interested in cp_tetrapods <- subset(tetrapods, min_ma > min(bins$min_ma))  # Bin occurrences into chosen time bins mid_tetrapods <- bin_time(occdf = cp_tetrapods,                           bins = bins,                           method = 'mid') ## Warning in bin_time(occdf = cp_tetrapods, bins = bins, method = \"mid\"): One or more occurrences have a midpoint age ## equivalent to a bin boundary. Binning skipped for these occurrences. Hint: `which(is.na(occdf$bin_assignment))`. # Examine the dataset columns colnames(mid_tetrapods) ##  [1] \"occurrence_no\"     \"collection_no\"     \"identified_name\"   \"identified_rank\"   \"accepted_name\"     ##  [6] \"accepted_rank\"     \"early_interval\"    \"late_interval\"     \"old_max_ma\"        \"old_min_ma\"        ## [11] \"phylum\"            \"class\"             \"order\"             \"family\"            \"genus\"             ## [16] \"abund_value\"       \"abund_unit\"        \"lng\"               \"lat\"               \"collection_name\"   ## [21] \"cc\"                \"formation\"         \"stratgroup\"        \"member\"            \"zone\"              ## [26] \"lithology1\"        \"environment\"       \"pres_mode\"         \"taxon_environment\" \"motility\"          ## [31] \"life_habit\"        \"diet\"              \"early_stage\"       \"late_stage\"        \"max_ma\"            ## [36] \"interval_mid_ma\"   \"min_ma\"            \"id\"                \"n_bins\"            \"bin_assignment\"    ## [41] \"bin_midpoint\" # Make a table of potential number of bins table(mid_tetrapods$n_bins) # raw counts ##  ##    1    2    3    4    5    6    7    8    9  ##  843 1754  425  268   33   34    3    2   16 table(mid_tetrapods$n_bins) / nrow(mid_tetrapods) # proportions ##  ##            1            2            3            4            5            6            7            8  ## 0.2495559503 0.5192421551 0.1258140912 0.0793368857 0.0097690941 0.0100651273 0.0008880995 0.0005920663  ##            9  ## 0.0047365305 # Bin occurrences into chosen time bins maj_tetrapods <- bin_time(occdf = cp_tetrapods,                           bins = bins,                           method = 'majority') # Palaeorotate occurrences maj_tetrapods <- palaeorotate(occdf = maj_tetrapods, age = \"bin_midpoint\",                               method = \"point\", model = \"PALEOMAP\") # Check palaeocoordinates head(maj_tetrapods[, c(\"p_lng\", \"p_lat\")]) ##      p_lng    p_lat ## 1 -39.1618   2.9214 ## 2 -34.0923 -59.1326 ## 4 -29.7188  -0.1250 ## 5 -27.9228   3.6845 ## 6 -29.0469  -0.2730 ## 7 -16.5579  -6.0513 # Make a table of potential number of bins maj_tetrapods <- bin_space(occdf = maj_tetrapods,                            lng = 'p_lng',                            lat = 'p_lat',                            spacing = 100) ## Average spacing between adjacent cells in the primary grid was set to 103.6 km.  ## H3 resolution: 3 # Show the first 6 rows of the new columns added using `bin_space`. head(maj_tetrapods[, c(\"cell_ID\", \"cell_centroid_lng\", \"cell_centroid_lat\")]) ##           cell_ID cell_centroid_lng cell_centroid_lat ## 1 8380d4fffffffff         -38.83199        3.04111345 ## 2 83dd68fffffffff         -34.66666      -59.09848198 ## 4 837c65fffffffff         -29.87643       -0.04859754 ## 5 837c40fffffffff         -27.94272        3.31086571 ## 6 837c64fffffffff         -28.90531       -0.63974717 ## 7 837da3fffffffff         -16.16673       -6.15422544 # Extract unique interval midpoints midpoints <- sort(unique(maj_tetrapods$bin_midpoint))  # Calculate the number of unique cells in each time bin unique_cells <- unique(maj_tetrapods[, c(\"bin_midpoint\", \"cell_ID\")]) spat.cov <- group_apply(unique_cells, group = \"bin_midpoint\", fun = nrow)"},{"path":"https://palaeoverse.palaeoverse.org/articles/tetrapod-biodiversity.html","id":"unique-taxa-and-alpha-diversity","dir":"Articles","previous_headings":"","what":"Unique taxa and alpha diversity","title":"Alpha diversity and geographic range size of Carboniferous and Permian tetrapods","text":"many cases palaeobiologists count unique taxa retaining unique occurrences identified given taxonomic resolution (e.g. genera species); however, can result useful information discarded. tax_unique function retains occurrences identified coarser taxonomic resolution already represented within dataset. Take, example, following occurrences: Albertosaurus sarcophagus Ankylosaurus sp. Ceratopsidae indet. Ornithominus sp. Tyrannosaurus rex filter species-level identifications reduce species richness just two (. sarcophagus T. rex). However, none clades nested within one another, indeterminately identified occurrences represents least one species already represented dataset. tax_unique designed deal taxonomic data retain seven ‘species’ example. details see ?tax_unique. function can especially useful looking alpha diversity (local richness). Let’s apply dataset filtering genus-level. can compare genera original dataset see many genera added using tax_unique(): can see ’ve added two taxa otherwise ignored! see specifically function performed, take look row 718, records indeterminate occurrence family Dicynodontidae. occurrence now unique name ‘Dicynodontidae indet.’ Now, let’s use function extract unique genera collection (=locality) group_apply: Next, let’s count number unique genera per collection: plot alpha diversity (local richness) plot, need add interval age data collections: Done. Now plot alpha diversity time! Let’s start simple scatterplot: plot chunk alpha-div-plot-1 looks good, ’s bit difficult figure stages contain data points. axis_geo() adds geological timescale plot axis. Taking plot , let’s use function add timescale x-axis: plot chunk alpha-div-plot-2 Amazing! Now can clearly see alpha diversity appears lot higher Permian Carboniferous. spatial distribution tetrapods changed across boundary? Let’s use palaeoverse functions find !","code":"# Filter to genus-level: tet_genera <- tax_unique(occdf = maj_tetrapods, genus = \"genus\", family = \"family\",                          order = \"order\", class = \"class\", resolution = \"genus\") # How many unique genera before: length(unique(maj_tetrapods$genus)) ## [1] 717 # How many unique genera after: length(unique(tet_genera$unique_name)) ## [1] 719 # See just row 718 tet_genera[718, ] ##            class        order         family genus           unique_name ## 718 Osteichthyes Dicynodontia Dicynodontidae  <NA> Dicynodontidae indet. # Use group_apply along with tax_unique: coll_genera <- group_apply(occdf = maj_tetrapods,                            group = c(\"collection_no\"),                            fun = tax_unique,                            genus = \"genus\",                            family = \"family\",                            order = \"order\",                            class = \"class\",                            resolution = \"genus\")  # See structure of the new dataframe: str(coll_genera) ## 'data.frame':    2853 obs. of  6 variables: ##  $ class        : chr  \"Osteichthyes\" \"Osteichthyes\" \"Osteichthyes\" \"Reptilia\" ... ##  $ order        : chr  NA \"Temnospondyli\" \"Cotylosauria\" NA ... ##  $ family       : chr  NA \"Dissorophidae\" NA \"Bolosauridae\" ... ##  $ genus        : chr  NA \"Parioxys\" \"Archeria\" \"Bolosaurus\" ... ##  $ unique_name  : chr  \"Osteichthyes indet.\" \"Parioxys sp.\" \"Archeria sp.\" \"Bolosaurus sp.\" ... ##  $ collection_no: chr  \"11149\" \"11152\" \"11165\" \"11165\" ... # Get the names of unique genera per collection unique_genera <- unique(coll_genera[, c(\"unique_name\", \"collection_no\")])  # Calculate the number of unique genera per collection coll_taxa <- group_apply(unique_genera, group = \"collection_no\", fun = nrow)  # Rename column names: colnames(coll_taxa) <- c(\"n_taxa\", \"collection_no\")  # Take a quick look at the new dataframe head(coll_taxa) ##   n_taxa collection_no ## 1      1        104796 ## 2      1        106270 ## 3      3        106558 ## 4      8        108766 ## 5      3        109702 ## 6      1         11149 # Take the columns pertaining to collections and their ages in millions of years: coll_info <- maj_tetrapods[, c(\"collection_no\", \"max_ma\", \"interval_mid_ma\", \"min_ma\")]  # Remove duplicated collections based on the collection number (column 1) coll_info <- coll_info[!duplicated(coll_info[1]),]  # Combine this dataframe with the dataframe from above alpha_data <- merge(coll_info, coll_taxa, by = \"collection_no\")  # Take a look: head(alpha_data) ##   collection_no max_ma interval_mid_ma min_ma n_taxa ## 1         11149 290.10          284.70 283.50      1 ## 2         11152 293.52          283.90 272.95      1 ## 3         11165 298.90          294.50 290.10      9 ## 4         11323 303.70          301.15 293.52      1 ## 5         12943 307.00          302.40 298.90      1 ## 6         12976 283.50          275.80 272.95      7 # Make a plot for alpha diversity in the Carboniferous and Permian plot(alpha_data$interval_mid_ma, alpha_data$n_taxa, # add the points      xlim = rev(range(alpha_data$interval_mid_ma, na.rm = TRUE)), # reverse the x-axis      xlab=\"Time (Ma)\", ylab=\"No. taxa\", # axes labels      pch = 19, col = \"#0e826f\") # point style and colour # Set margins par(mar = c(7.1, 4.1, 4.1, 2.1)) # expand at bottom if adding more interval categories  # Make the final alpha diversity plot plot(alpha_data$interval_mid_ma, alpha_data$n_taxa, # add the points      axes = FALSE,      xlim = rev(range(alpha_data$interval_mid_ma, na.rm = TRUE)), # reverse the x-axis      xlab = \" \", ylab = \"No. taxa\", # axes labels      pch = 19, col = \"#0e826f\") # point style and colour box() axis(2) # add a normal axis to the elft side axis_geo(side = 1, intervals = list(\"epochs\", \"periods\")) title(xlab = \"Time (Ma)\", line = 4)"},{"path":"https://palaeoverse.palaeoverse.org/articles/tetrapod-biodiversity.html","id":"exploring-range-sizespatial-issues-through-time","dir":"Articles","previous_headings":"","what":"Exploring range size/spatial issues through time","title":"Alpha diversity and geographic range size of Carboniferous and Permian tetrapods","text":"Another factor can examine range size taxa changed across C/P boundary. can examine spatial distribution time using tax_range_space function, provides several different methods estimating distribution taxonomic occurrences. now ’ll use method con calculates geographic range taxa using convex hull, rest methods described detail function documentation can accessed via ?tax_range_space. can use combination group_apply calculate average time interval dataset: can see, combination group_apply tax_range_space produces dataset area geographic range taxon kilometers squared time interval. Note area zero means one occurrence taxon time bin. information can now plot average range size tetrapods changed throughout Carboniferous Permian: plot chunk alpha-div-plot-3 plot seems like average geographic range size tetrapods increased Permian. However, first need sure ’re picking another pattern. Remember calculated number unique geographic cells time interval earlier? provides measure spatial spread fossil record. might ’re picking increased range size just larger geographic spread fossil bearing rocks within Permian. see case, can run simple correlation test average geographic range size tetrapods number unique grid cells time interval: high rho value p-value less cut significance (0.05) indicate strong statistically significant correlation average geographic range size spatial spread data. Seems like work far … …’ll leave rest ! Hopefully vignette shown potential uses palaeoverse functions helped provide workflow analyses. questions package functionality, please feel free join Palaeoverse Google group leave question; ’ll aim answer soon possible!","code":"# First, remove any occurrences without a genus space_tetrapods <- subset(maj_tetrapods, !is.na(genus))  # Find temporal range of all genera space_tetrapods <- group_apply(occdf = space_tetrapods,                                group = c(\"bin_midpoint\"),                                fun = tax_range_space,                                name = \"genus\",                                lng = \"p_lng\",                                lat = \"p_lat\",                                method = \"con\")  # Have a look at the dataset head(space_tetrapods) ##               taxon taxon_id      area bin_midpoint ## 1         Abdalodon        1      0.00       257.05 ## 2         Acrodenta        2      0.00       257.05 ## 3       Adelosaurus        3      0.00       257.05 ## 4     Aelurognathus        4 292392.77       257.05 ## 9      Aelurosaurus        5  14698.41       257.05 ## 14 Aenigmastropheus        6      0.00       257.05 # Find the average geographic range size for each time interval space_tetrapods_mean <- group_apply(space_tetrapods, \"bin_midpoint\", function(df) mean(df$area)) colnames(space_tetrapods_mean) <- c(\"mean_area\", \"bin_midpoint\")  # Create a plot of average range size through time plot(space_tetrapods_mean$bin_midpoint, space_tetrapods_mean$mean_area, # add the points      axes = FALSE,      xlim = rev(range(as.numeric(space_tetrapods_mean$bin_midpoint), na.rm = TRUE)), # reverse the x-axis      xlab = \" \", ylab = expression(\"Average range size of tetrapod genera (km\"^2~\")\"), # axes labels      pch = 19, col = \"#0e826f\") # point style and colour box() axis(2) # add a normal axis to the left side axis_geo(side = 1, intervals = list(\"epochs\", \"periods\")) title(xlab = \"Time (Ma)\", line = 4) # Run a correlation test between mean range size and the spatial spread of cells # through time cor.test(log10(space_tetrapods_mean$mean_area), log10(spat.cov$nrow), method = \"spearman\") ##  ##  Spearman's rank correlation rho ##  ## data:  log10(space_tetrapods_mean$mean_area) and log10(spat.cov$nrow) ## S = 226.12, p-value = 0.01898 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ##       rho  ## 0.5962179"},{"path":"https://palaeoverse.palaeoverse.org/articles/tetrapod-biodiversity.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Alpha diversity and geographic range size of Carboniferous and Permian tetrapods","text":"Dunne, E.M., Close, R.., Button, D.J., Brocklehurst, N., Cashmore, D.D., Lloyd, G.T. Butler, R.J., 2018. Diversity change rise tetrapods impact ‘Carboniferous rainforest collapse’. Proceedings Royal Society B: Biological Sciences, 285(1872), 20172730.","code":""},{"path":"https://palaeoverse.palaeoverse.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lewis . Jones. Author, maintainer. William Gearty. Author. Bethany J. Allen. Author. Kilian Eichenseer. Author. Christopher D. Dean. Author. Sofia Galvan. Contributor. Miranta Kouvari. Contributor. Pedro L. Godoy. Contributor. Cecily Nicholl. Contributor. Lucas Buffan. Contributor. Erin M. Dillon. Contributor. Joseph T. Flannery-Sutherland. Author. . Alessandro Chiarenza. Contributor.","code":""},{"path":"https://palaeoverse.palaeoverse.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jones, L.., Gearty, W., Allen, B.J., Eichenseer, K., Dean, C.D., Galván S., Kouvari, M., Godoy, P.L., Nicholl, C.S.C., Dillon, E.M., Flannery-Sutherland, J.T., Chiarenza, .. 2023. palaeoverse: community-driven R package support palaeobiological analysis. Methods Ecology Evolution. 14(9), 2205--2215. doi: 10.1111/2041-210X.14099","code":"@Article{,   title = {palaeoverse: A community-driven R package to support palaeobiological analysis},   author = {Lewis A. Jones and William Gearty and Bethany J. Allen and Kilian Eichenseer and Christopher D. Dean and Sofía Galván and Miranta Kouvari and Pedro L. Godoy and Cecily S. C. Nicholl and Lucas Buffan and Erin M. Dillon and Joseph T. Flannery-Sutherland and Alfio Alessandro Chiarenza},   year = {2023},   journal = {Methods in Ecology and Evolution},   volume = {14(9)},   pages = {2205--2215},   doi = {10.1111/2041-210X.14099}, }"},{"path":"https://palaeoverse.palaeoverse.org/index.html","id":"palaeoverse-","dir":"","previous_headings":"","what":"Prepare and Explore Data for Palaeobiological Analyses","title":"Prepare and Explore Data for Palaeobiological Analyses","text":"palaeoverse R package developed palaeobiologists, palaeobiologists. aim palaeoverse generate community-driven software package generic functions palaeobiological community. package provide implementations statistical analyses, rather provides auxiliary functions help streamline analyses improve code readability reproducibility.","code":""},{"path":"https://palaeoverse.palaeoverse.org/index.html","id":"development-team","dir":"","previous_headings":"","what":"Development team","title":"Prepare and Explore Data for Palaeobiological Analyses","text":"Lewis . Jones, Universidade de Vigo William Gearty, American Museum Natural History Bethany J. Allen, ETH Zürich Kilian Eichenseer, Durham University Christopher D. Dean, University College London Sofía Galván, Universidade de Vigo Miranta Kouvari, University College London/Natural History Museum Pedro L. Godoy, University São Paulo/Stony Brook University Cecily Nicholl, University College London Lucas Buffan, École Normale Supérieure de Lyon Erin M. Dillon, Smithsonian Tropical Research Institute/University California . Alessandro Chiarenza, Universidade de Vigo","code":""},{"path":"https://palaeoverse.palaeoverse.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prepare and Explore Data for Palaeobiological Analyses","text":"stable version palaeoverse can installed CRAN using: development version palaeoverse can installed via GitHub using:","code":"install.packages(\"palaeoverse\") # install.packages(\"devtools\") devtools::install_github(\"palaeoverse/palaeoverse\")"},{"path":"https://palaeoverse.palaeoverse.org/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute?","title":"Prepare and Explore Data for Palaeobiological Analyses","text":"interested contributing palaeoverse R package, can following guidelines. also adopted set standards structure follow contributing project. like contribute palaeoverse, strongly advise reading document.","code":""},{"path":"https://palaeoverse.palaeoverse.org/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Prepare and Explore Data for Palaeobiological Analyses","text":"community project, society, meeting feel important established expectations behaviour palaeoverse community. Please read code conduct, reach ever face issues. Everyone right live work harassment-free environment.","code":""},{"path":"https://palaeoverse.palaeoverse.org/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Prepare and Explore Data for Palaeobiological Analyses","text":"use palaeoverse R package work, please cite : Jones, L.., Gearty, W., Allen, B.J., Eichenseer, K., Dean, C.D., Galván S., Kouvari, M., Godoy, P.L., Nicholl, C., Dillon, E.M., Flannery-Sutherland, J.T., Chiarenza, .. 2023. palaeoverse: community-driven R package support palaeobiological analysis. Methods Ecology Evolution 14(09), 2205–2215. doi: 10.1111/2041-210X.14099.   Hexlogo Miranta Kouvari Cecily Nicholl","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Geological Timescale 2012 — GTS2012","title":"Geological Timescale 2012 — GTS2012","text":"dataframe Geological Timescale 2012. Age data International Commission Stratigraphy. Supplementary information also included dataset plotting functionality (e.g. GTS2012 colour scheme).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geological Timescale 2012 — GTS2012","text":"","code":"GTS2012"},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2012.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Geological Timescale 2012 — GTS2012","text":"data frame 186 rows 9 variables: interval_number Index number temporal order intervals present dataset. interval_name Names intervals dataset. rank temporal rank intervals dataset. max_ma maximum age interval millions years present. mid_ma midpoint age interval millions years present. min_ma minimum age interval millions years present. duration_myr duration interval millions years. font Colour font use plotting conjunction colour column. colour Colours stages based ICS timescale. abbr Standard abbreviations interval names appropiate.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2012.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Geological Timescale 2012 — GTS2012","text":"Compiled Lewis . Jones (2022-07-02) ICS.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2012.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Geological Timescale 2012 — GTS2012","text":"Gradstein, F.M., Ogg, J.G., Schmitz, M.D. Ogg, G.M. eds. (2012). Geologic Timescale 2012. Elsevier.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2020.html","id":null,"dir":"Reference","previous_headings":"","what":"Geological Timescale 2020 — GTS2020","title":"Geological Timescale 2020 — GTS2020","text":"dataframe Geological Timescale 2020. Age data International Commission Stratigraphy. Supplementary information included dataset plotting functionality (e.g. GTS2020 colour scheme).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2020.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geological Timescale 2020 — GTS2020","text":"","code":"GTS2020"},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2020.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Geological Timescale 2020 — GTS2020","text":"data frame 189 rows 9 variables: interval_number Index number temporal order intervals present dataset. interval_name Names intervals dataset. rank temporal rank intervals dataset. max_ma maximum age interval millions years present. mid_ma midpoint age interval millions years present. min_ma minimum age interval millions years present. duration_myr duration interval millions years. font Colour font use plotting conjunction colour column. colour Colours stages based ICS timescale. abbr Standard abbreviations interval names appropiate.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2020.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Geological Timescale 2020 — GTS2020","text":"Compiled Lewis . Jones (2022-07-02) ICS.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/GTS2020.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Geological Timescale 2020 — GTS2020","text":"Gradstein, F.M., Ogg, J.G., Schmitz, M.D. Ogg, G.M. eds. (2020). Geologic Timescale 2020. Elsevier.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/axis_geo.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an axis with a geological timescale — axis_geo","title":"Add an axis with a geological timescale — axis_geo","text":"axis_geo behaves similarly axis adds axis specified side base R plot. main difference also adds geological timescale plot axis. default scale includes international epochs Geological Timescale 2020 (GTS2020). However, international stages, periods, eras, eons also available. Interval data hosted Macrostrat also available (see time_bins). custom interval dataset can also used (see Details ). appearance axis highly customisable (see Usage ), intent plots publication-ready.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/axis_geo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an axis with a geological timescale — axis_geo","text":"","code":"axis_geo(   side = 1,   intervals = \"epoch\",   height = 0.05,   fill = NULL,   lab = TRUE,   lab_col = NULL,   lab_size = 1,   rot = 0,   abbr = TRUE,   center_end_labels = TRUE,   autofit = FALSE,   skip = c(\"Quaternary\", \"Holocene\", \"Late Pleistocene\"),   bord_col = \"black\",   lty = par(\"lty\"),   lwd = par(\"lwd\"),   bkgd = \"grey90\",   neg = FALSE,   exact = FALSE,   round = FALSE,   tick_at = NULL,   tick_labels = TRUE,   title = NULL,   phylo = FALSE,   root.time = NULL,   ... )  axis_geo_phylo(...)"},{"path":"https://palaeoverse.palaeoverse.org/reference/axis_geo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an axis with a geological timescale — axis_geo","text":"side integer. side add axis (1: bottom, default; 2: left; 3: top; 4: right). intervals interval information use plot axis: either ) character string indicating rank intervals built-GTS2020, B) character string indicating data.frame hosted Macrostrat (see time_bins), C) custom data.frame time interval boundaries (see Details). list strings data.frames can supplied add multiple time scales side plot (see Details). height numeric. relative height (width side 2 4) scale. relative height (side 1 3) width (side 2 4) plot. fill character. fill colour boxes. default use colour color column included intervals. custom dataset provided intervals without colour color column without specifying fill, greyscale used. Custom fill colours can provided option (overriding colour color column) recycled /necessary. lab logical. interval labels included? lab_col character. colour labels. default use font lab_color column included intervals. custom dataset provided intervals without font lab_color column without specifying lab_col, labels black. Custom label colours can provided option (overriding font lab_color column) recycled /necessary. lab_size numeric. size labels (see cex graphics parameters). rot numeric. amount counter-clockwise rotation add labels (degrees). Note, labels axes added left right sides already rotated 90 degrees. abbr logical. labels abbreviated? works data abbr column, otherwise name column used regardless setting. center_end_labels logical. labels centered within visible range intervals ends axis? autofit logical. labels automatically resized fit interval boxes? TRUE, lab_size used maximum possible size labels. FALSE (default), lab_size used size labels. skip character vector interval names indicating intervals labeled. abbr TRUE, can also include interval abbreviations. Quaternary, Holocene, Late Pleistocene skipped default. Set NULL desired. bord_col character. border colour interval boxes. lty character. Line type (see lty graphics parameters). value (last value list) also passed axis. lwd numeric. Line width (see lwd graphics parameters). bkgd character. colour background scale intervals shown. neg logical. Set TRUE x-axis using negative values. entire axis already negative, set TRUE . exact logical. Set TRUE want axis tick marks numeric tick labels placed interval boundaries. TRUE, overrides tick_at tick_labels. round integer. Number decimal places exact axis labels rounded (using round). value specified, exact values used. Trailing zeros always removed. tick_at tick_labels can used include labels trailing zeros. tick_at numeric vector specifying custom points tick marks drawn axis. specified, passed directly axis. phylo TRUE, values converted necessary phylogenetic axis limits. set NULL (default) tick mark locations computed automatically (see axTicks). tick_labels Either ) logical value specifying whether (numerical) annotations made tick marks specified tick_at, b) custom character expression vector labels placed tick marks. tick_at specified, argument passed directly axis. title character. axis title added outside specified axis. passed directly mtext. set NULL (default), title added. phylo logical. base plot phylogeny generated plot.phylo, plotTree, plotSimmap, etc? root.time numeric. phylo TRUE, time assigned root node tree. default, taken root.time element plotted tree. ... arguments passed directly axis mtext.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/axis_geo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an axis with a geological timescale — axis_geo","text":"return value. Function used side effect, add axis geological timescale already existing plot.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/axis_geo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an axis with a geological timescale — axis_geo","text":"custom data.frame provided (intervals), consist least 3 columns data. See GTS2020 example. interval_name column (name also allowed) lists names time interval. used labels abbreviations provided. max_ma column (max_age also allowed) lists oldest boundary time interval. Values always positive. min_ma column (min_age also allowed) lists youngest boundary time interval. Values always positive. abbr column optional lists abbreviations may used labels. colour column (color also allowed) also optional lists colour background time interval (see Color Specification section ). font (lab_color also allowed) column also optional lists colour label time interval (see Color Specification section ). intervals may also list multiple time scales added single side plot. case, height, fill, lab, lab_col, lab_size, rot, abbr, center_end_labels, skip, bord_col, lty, lwd, autofit can also lists. lists long intervals, elements recycled. individual values (vectors, e.g. skip) used parameters, applied time scales (recycled necessary). multiple scales requested added sequentially outwards starting plot border. axis always placed outside last scale using axis. title argument supplied, axis title added outside using mtext. Additional arguments, including various graphics parameters, supplied axis_geo passed functions (e.g. tck control length tick marks, mgp control title tick label locations, col control axis title color, etc.). Note title always placed middle axis. may desirable phylogenetic trees, title may better offset axis. cases, users manually add title using mtext. like use intervals Geological Time Scale 2012 (GTS2012), can use time_bins supply returned data.frame intervals argument. axis_geo_phylo(...) shorthand axis_geo(..., phylo = TRUE).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/axis_geo.html","id":"authors","dir":"Reference","previous_headings":"","what":"Authors","title":"Add an axis with a geological timescale — axis_geo","text":"William Gearty & Kilian Eichenseer","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/axis_geo.html","id":"reviewer","dir":"Reference","previous_headings":"","what":"Reviewer","title":"Add an axis with a geological timescale — axis_geo","text":"Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/axis_geo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an axis with a geological timescale — axis_geo","text":"","code":"# track user par oldpar <- par(no.readonly = TRUE) # single scale on bottom par(mar = c(6.1, 4.1, 4.1, 2.1)) # modify margin plot(0:100, axes = FALSE, xlim = c(100, 0), ylim = c(100, 0),      xlab = NA, ylab = \"Depth (m)\") box() axis(2) axis_geo(side = 1, intervals = \"period\", title = \"Time (Ma)\")   # stack multiple scales, abbreviate only one set of labels par(mar = c(7.1, 4.1, 4.1, 2.1)) # further expand bottom margin plot(0:100, axes = FALSE, xlim = c(100, 0), ylim = c(100, 0),      xlab = NA, ylab = \"Depth (m)\") box() axis(2) axis_geo(side = 1, intervals = list(\"epoch\", \"period\"),          abbr = list(TRUE, FALSE), title = \"Time (Ma)\")   # scale with Macrostrat intervals par(mar = c(6.1, 4.1, 4.1, 2.1)) # modify margin plot(0:30, axes = FALSE, xlim = c(30, 0), ylim = c(30, 0),      xlab = NA, ylab = \"Depth (m)\") box() axis(2) # this time, add a title automatically with axis_geo() axis_geo(side = 1, intervals = \"North American land mammal ages\",          title = \"Time (Ma)\")   # scale with custom intervals intervals <- data.frame(min_ma = c(0, 10, 25, 32),                         max_ma = c(10, 25, 32, 40),                         interval_name = c(\"A\", \"B\", \"C\", \"D\")) par(mar = c(6.1, 4.1, 4.1, 2.1)) # modify margin plot(0:40, axes = FALSE, xlim = c(40, 0), ylim = c(40, 0),      xlab = NA, ylab = \"Depth (m)\") box() axis(2) axis_geo(side = 1, intervals = intervals, title = \"Time (Ma)\")   # scale with phylogeny library(phytools) data(mammal.tree) plot(mammal.tree) axis_geo_phylo(title = \"Time (Ma)\")  # scale with fossil phylogeny library(paleotree) data(RaiaCopesRule) plot(ceratopsianTreeRaia) axis_geo_phylo(title = \"Time (Ma)\")   # reset user par par(oldpar)"},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_lat.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign fossil occurrences to latitudinal bins — bin_lat","title":"Assign fossil occurrences to latitudinal bins — bin_lat","text":"function assign fossil occurrences user-specified latitudinal bins.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_lat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign fossil occurrences to latitudinal bins — bin_lat","text":"","code":"bin_lat(occdf, bins, lat = \"lat\", boundary = FALSE)"},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_lat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign fossil occurrences to latitudinal bins — bin_lat","text":"occdf dataframe. dataframe fossil occurrences wish bin. dataframe contain column latitudinal coordinates occurrence data. bins dataframe. dataframe bins wish allocate fossil occurrences , returned lat_bins(). dataframe must contain least following named columns: \"bin\", \"max\" \"min\". lat character. name column wish treated input latitude (e.g. \"lat\" \"p_lat\"). column contain numerical values. Defaults \"lat\". boundary logical. TRUE, occurrences falling boundaries latitudinal bins duplicated assigned bins. FALSE, occurrences binned upper bin (.e. highest row number).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_lat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign fossil occurrences to latitudinal bins — bin_lat","text":"dataframe original input occdf appended columns containing respective latitudinal bin information.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_lat.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Assign fossil occurrences to latitudinal bins — bin_lat","text":"Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_lat.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Assign fossil occurrences to latitudinal bins — bin_lat","text":"Sofia Galvan","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_lat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign fossil occurrences to latitudinal bins — bin_lat","text":"","code":"# Load occurrence data occdf <- tetrapods # Generate latitudinal bins bins <- lat_bins_degrees(size = 10) # Bin data occdf <- bin_lat(occdf = occdf, bins = bins, lat = \"lat\") #> Presence of occurrences falling on boundaries detected.  #> Occurrences assigned to upper bin."},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign fossil occurrences to spatial bins — bin_space","title":"Assign fossil occurrences to spatial bins — bin_space","text":"function assign fossil occurrences (localities) spatial bins/samples using hexagonal equal-area grid.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign fossil occurrences to spatial bins — bin_space","text":"","code":"bin_space(   occdf,   lng = \"lng\",   lat = \"lat\",   spacing = 100,   sub_grid = NULL,   return = FALSE,   plot = FALSE )"},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign fossil occurrences to spatial bins — bin_space","text":"occdf dataframe. dataframe fossil occurrences (localities) wish bin. dataframe contain decimal degree coordinates occurrences, class numeric. lng character. name column wish treated input longitude (e.g. \"lng\" \"p_lng\"). lat character. name column wish treated input latitude (e.g. \"lat\" \"p_lat\"). spacing numeric. desired spacing center adjacent cells. value provided kilometres. sub_grid numeric. optional sub-grid, desired spacing center adjacent cells sub-grid. value provided kilometres. See details information sub-grid usage. return logical. equal-area grid information polygons returned? plot logical. occupied cells equal-area grid plotted?","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign fossil occurrences to spatial bins — bin_space","text":"return argument set FALSE, dataframe returned original input occdf cell information. return set TRUE, list returned input occdf grid information polygons.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_space.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign fossil occurrences to spatial bins — bin_space","text":"function assigns fossil occurrence data equal-area grid cells using discrete hexagonal grids via h3jsr package. package relies Uber's H3 library, geospatial indexing system partitions world hexagonal cells. H3, 16 different resolutions available (see ). implementation bin_space() function, resolution defined user-input spacing represents distance centroid adjacent cells. Using distance, function identifies resolution similar input spacing, uses resolution. Additional functionality allows user simultaneously assign occurrence data equal-area grid cells finer-scale grid (.e. ‘sub-grid’) within primary grid via sub_grid argument. might desirable users evaluate differences amount area occupied occurrences within primary grid cells. functionality also allows user easily rarefy across sub-grid cells within primary cells standardise spatial sampling (see example basic implementation). Note: prior implementation, coordinate reference system (CRS) input data defined EPSG:4326 (World Geodetic System 1984). user transform data accordingly appropriate. unfamiliar working geographic data, highly recommend checking Geocomputation R.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_space.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Assign fossil occurrences to spatial bins — bin_space","text":"Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_space.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Assign fossil occurrences to spatial bins — bin_space","text":"Bethany Allen & Kilian Eichenseer","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign fossil occurrences to spatial bins — bin_space","text":"","code":"# Get internal data data(\"reefs\")  # Reduce data for plotting occdf <- reefs[1:250, ]  # Bin data using a hexagonal equal-area grid ex1 <- bin_space(occdf = occdf, spacing = 500, plot = TRUE) #> Average spacing between adjacent cells in the primary grid was set to 725.17 km.  #> H3 resolution: 1  # Bin data using a hexagonal equal-area grid and sub-grid ex2 <- bin_space(occdf = occdf, spacing = 1000, sub_grid = 250, plot = TRUE)  #> Average spacing between adjacent cells in the primary grid was set to 725.17 km.  #> H3 resolution: 1  # EXAMPLE: rarefy # Load data occdf <- tetrapods[1:250, ]  # Assign to spatial bin occdf <- bin_space(occdf = occdf, spacing = 1000, sub_grid = 250) #> Average spacing between adjacent cells in the primary grid was set to 725.17 km.  #> H3 resolution: 1  # Get unique bins bins <- unique(occdf$cell_ID)  # n reps n <- 10  # Rarefy data across sub-grid grid cells # Returns a list with each element a bin with respective mean genus richness df <- lapply(bins, function(x) {   # subset occdf for respective grid cell   tmp <- occdf[which(occdf$cell_ID == x), ]    # Which sub-grid cells are there within this bin?   sub_bin <- unique(tmp$cell_ID_sub)    # Sample 1 sub-grid cell n times   s <- sample(sub_bin, size = n, replace = TRUE)    # Count the number of unique genera within each sub_grid cell for each rep   counts <- sapply(s, function(i) {     # Number of unique genera within each sample     length(unique(tmp[which(tmp$cell_ID_sub == i), ]$genus))   })    # Mean richness across subsamples   mean(counts) })"},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign fossil occurrences to time bins — bin_time","title":"Assign fossil occurrences to time bins — bin_time","text":"function assign fossil occurrences specified time bins based different approaches commonly applied palaeobiology.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign fossil occurrences to time bins — bin_time","text":"","code":"bin_time(   occdf,   min_ma = \"min_ma\",   max_ma = \"max_ma\",   bins,   method = \"mid\",   reps = 100,   fun = dunif,   ... )"},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign fossil occurrences to time bins — bin_time","text":"occdf dataframe. dataframe fossil occurrences wish bin. dataframe contain least two columns numeric values: maximum age occurrence minimum age occurrence (see max_ma, min_ma). required, numeric ages can generated interval names via look_up() function. min_ma character. name column wish treated minimum age occdf bins, e.g. \"min_ma\" (default). max_ma character. name column wish treated maximum age occdf bins, e.g. \"max_ma\" (default). bins dataframe. dataframe bins wish allocate fossil occurrences returned time_bins(). dataframe must contain least following named columns: \"bin\" specified max_ma (default: \"max_ma\") min_ma (default: \"min_ma\"). Columns max_ma min_ma must numeric values. method character. method desired binning fossil occurrences. Currently, five methods exist function: \"mid\", \"majority\", \"\", \"random\", \"point\". See Details description . reps numeric. non-negative numeric specifying number replications sampling. argument useful case \"random\" \"point\" method specified method argument. Defaults 100. fun function. probability density function stats package dunif dnorm. argument useful \"point\" method specified method argument. ... Additional arguments available called function (fun). arguments may required function arguments without default values, wish overwrite default argument value (see example). x input values generated internally based age range fossil occurrence manually provided. Note x input values range 0 1, function arguments therefore scaled within bounds.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign fossil occurrences to time bins — bin_time","text":"methods \"mid\", \"majority\" \"\", dataframe original input occdf following appended columns returned: occurrence id (id), number bins occurrence age range covers (n_bins), bin assignment (bin_assignment), bin midpoint (bin_midpoint). case \"majority\" method, additional column majority percentage overlap (overlap_percentage) also appended. \"random\" \"point\" method, list returned (length reps) element copy occdf appended columns (random: bin_assignment bin_midpoint; point: bin_assignment point_estimates).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign fossil occurrences to time bins — bin_time","text":"Five approaches (methods) exist bin_time() function assigning occurrences time bins: Midpoint: \"mid\" method simplest approach uses midpoint fossil occurrence age range bin occurrence. Majority: \"majority\" method bins occurrence bin overlaps . part implementation, majority percentage overlap occurrence also calculated returned additional column occdf. desired, percentages can used filter occurrence dataset. : \"\" method bins occurrence every bin age range covers. occurrences age ranges one bin, occurrence row duplicated. occurrence assigned ID column occdf$id duplicates can tracked. Additionally, occdf$n_bins records number bins occurrence appears within. Random: \"random\" method randomly samples X amount bins (replacement) bins fossil occurrence age range covers equal probability regardless bin length. reps argument determines number times sample process repeated. replications stored individual elements within returned list appended bin_assignment bin_midpoint column original input occdf. desired, users can easily bind list using .call(rbind, x). Point: \"point\" method randomly samples X (reps) amount point age estimates age range fossil occurrence. Sampling follows user-input probability density function dnorm (see example 5). Users also provide additional arguments probability density function (see ...). However, x (vector quantiles) values provided values input age range occurrence. values range 0 1, therefore function arguments scaled within bounds. reps argument determines number times sample process repeated. replications stored individual elements within returned list appended bin_assignment point_estimates column original input occdf. desired, users can easily bind list using .call(rbind, x).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_time.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Assign fossil occurrences to time bins — bin_time","text":"Christopher D. Dean & Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_time.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Assign fossil occurrences to time bins — bin_time","text":"William Gearty","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/bin_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign fossil occurrences to time bins — bin_time","text":"","code":"#Grab internal tetrapod data occdf <- tetrapods[1:100, ] bins <- time_bins()  #Assign via midpoint age of fossil occurrence data ex1 <- bin_time(occdf = occdf, bins = bins, method = \"mid\") #> Warning: One or more occurrences have a midpoint age equivalent to a bin boundary. Binning skipped for these occurrences. Hint: `which(is.na(occdf$bin_assignment))`.  #Assign to all bins that age range covers ex2 <- bin_time(occdf = occdf, bins = bins, method = \"all\")  #Assign via majority overlap based on fossil occurrence age range ex3 <- bin_time(occdf = occdf, bins = bins, method = \"majority\")  #Assign randomly to overlapping bins based on fossil occurrence age range ex4 <- bin_time(occdf = occdf, bins = bins, method = \"random\", reps = 5)  #Assign point estimates following a normal distribution ex5 <- bin_time(occdf = occdf, bins = bins, method = \"point\", reps = 5,                 fun = dnorm, mean = 0.5, sd = 0.25)"},{"path":"https://palaeoverse.palaeoverse.org/reference/group_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over grouping(s) of data — group_apply","title":"Apply a function over grouping(s) of data — group_apply","text":"function apply palaeoverse functionality across subsets (groups) data, delineated using one variables. Functions receive data.frame input (e.g. nrow, ncol, lengths, unique) may also used.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/group_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over grouping(s) of data — group_apply","text":"","code":"group_apply(occdf, group, fun, ...)"},{"path":"https://palaeoverse.palaeoverse.org/reference/group_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over grouping(s) of data — group_apply","text":"occdf dataframe. dataframe fossil occurrences taxa, relevant desired function. dataframe must contain grouping variables necessary variables function wish call (see function-specific documentation required columns). group character. vector column names, specifying desired subgroups (e.g. \"collection_no\", \"stage_bin\"). Supplying one grouping variable produce output containing subgroups unique combination values. fun function. function wish apply occdf. See details compatible functions. ... Additional arguments available called function. arguments may required function arguments without default values, wish overwrite default argument value (see examples).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/group_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function over grouping(s) of data — group_apply","text":"data.frame outputs selected function, appended column(s) indicating user-defined groups. single vector returned via called function, transformed data.frame column name equal input function.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/group_apply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function over grouping(s) of data — group_apply","text":"group_apply applies functions subgroups data within supplied dataset, enabling separate analysis occurrences taxa different time intervals, spatial regions, trait values. function serves wrapper around palaeoverse functions. functions can applied data.frame (e.g. nrow, ncol, lengths, unique) may also used.  palaeoverse functions require dataframe input can used conjunction group_apply function. However, unnecessary many functions (e.g. bin_time) groups need partitioned binning. list provides users palaeoverse functions might interesting apply across group(s): tax_unique: return number unique taxa per grouping variable. tax_range_time: return temporal range taxa per grouping variable. tax_range_space: return geographic range taxa per grouping variable. tax_check: return potential spelling variations taxon per grouping variable. Note: verbose needs set FALSE.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/group_apply.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Apply a function over grouping(s) of data — group_apply","text":"Lewis . Jones & William Gearty","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/group_apply.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Apply a function over grouping(s) of data — group_apply","text":"Kilian Eichenseer & Bethany Allen","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/group_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function over grouping(s) of data — group_apply","text":"","code":"# Examples # Get tetrapods data occdf <- tetrapods[1:100, ] # Remove NA data occdf <- subset(occdf, !is.na(genus)) # Count number of occurrences from each country ex1 <- group_apply(occdf = occdf, group = \"cc\", fun = nrow) # Unique genera per collection with group_apply and input arguments ex2 <- group_apply(occdf = occdf,                      group = c(\"collection_no\"),                      fun = tax_unique,                      genus = \"genus\",                      family = \"family\",                      order = \"order\",                      class = \"class\",                      resolution = \"genus\") # Use multiple variables (number of occurrences per collection and formation) ex3 <- group_apply(occdf = occdf,                    group = c(\"collection_no\", \"formation\"),                    fun = nrow) # Compute counts of occurrences per latitudinal bin # Set up lat bins bins <- lat_bins_degrees() # bin occurrences occdf <- bin_lat(occdf = occdf, bins = bins) # Calculate number of occurrences per bin ex4 <- group_apply(occdf = occdf, group = \"lat_bin\", fun = nrow)"},{"path":"https://palaeoverse.palaeoverse.org/reference/interval_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset: Interval key for the look_up function — interval_key","title":"Example dataset: Interval key for the look_up function — interval_key","text":"table geological intervals earliest latest corresponding international geological stages International Commission Stratigraphy (ICS). table compiled using regional stratigraphies, GeoWhen Database, temporal information Paleobiology Database Geological Timescale 2022. assignments made incomplete information stratigraphic provenance intervals. assignments table verified research use. provided example functionality .","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/interval_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset: Interval key for the look_up function — interval_key","text":"","code":"interval_key"},{"path":"https://palaeoverse.palaeoverse.org/reference/interval_key.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset: Interval key for the look_up function — interval_key","text":"data frame 1323 rows 3 variables: interval_name Stratigraphic interval early_stage Earliest (oldest) geological stage overlaps interval late_stage Latest (youngest) geological stage overlaps interval","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/interval_key.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataset: Interval key for the look_up function — interval_key","text":"Compiled Kilian Eichenseer Lewis Jones assigning geological stages ccurrences Paleobiology Database PaleoReefs Database.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate equal-width latitudinal bins — lat_bins","title":"Generate equal-width latitudinal bins — lat_bins","text":"lat_bins() renamed lat_bins_degrees() consistent lat_bins_area().","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate equal-width latitudinal bins — lat_bins","text":"","code":"lat_bins(size = 10, min = -90, max = 90, fit = FALSE, plot = FALSE)"},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate equal-width latitudinal bins — lat_bins","text":"size numeric. single numeric value defining width latitudinal bins. value must 0, less equal 90 (defaults 10). min numeric. single numeric value defining lower limit latitudinal range (defaults -90). max numeric. single numeric value defining upper limit latitudinal range (defaults 90). fit logical. bin size checked ensure entire latitudinal range covered? fit = TRUE, bin size set nearest integer divisible user-input range. fit = FALSE, bin size divisible range, upper part latitudinal range missing. plot logical. plot latitudinal bins generated? TRUE, plot generated. Defaults FALSE.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate equal-area latitudinal bins — lat_bins_area","title":"Generate equal-area latitudinal bins — lat_bins_area","text":"function generate approximately equal-area latitudinal bins user-specified number bins latitudinal range. approach based calculating curved surface area spherical segments bounded two parallel discs.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate equal-area latitudinal bins — lat_bins_area","text":"","code":"lat_bins_area(n = 12, min = -90, max = 90, r = 6371, plot = FALSE)"},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate equal-area latitudinal bins — lat_bins_area","text":"n numeric. single numeric value defining number equal-area latitudinal bins split latitudinal range (defined min max). min numeric. single numeric value defining lower limit latitudinal range (defaults -90). max numeric. single numeric value defining upper limit latitudinal range (defaults 90). r numeric. radius Earth kilometres. Defaults volumetric mean radius Earth (6371 km). user-specified r values accepted (e.g. equatorial radius 6378 km). plot logical. plot latitudinal bins generated? TRUE, plot generated. Defaults FALSE.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate equal-area latitudinal bins — lat_bins_area","text":"data.frame user-defined number latitudinal bins. data.frame contains following columns: bin (bin number), min (minimum latitude bin), mid (midpoint latitude bin), max (maximum latitude bin), area (area bin km2), area_prop (proportional area bin across bins).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_area.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Generate equal-area latitudinal bins — lat_bins_area","text":"Lewis . Jones & Kilian Eichenseer","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_area.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Generate equal-area latitudinal bins — lat_bins_area","text":"Kilian Eichenseer & Bethany Allen","code":""},{"path":[]},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate equal-area latitudinal bins — lat_bins_area","text":"","code":"# Generate 12 latitudinal bins bins <- lat_bins_area(n = 12) # Generate latitudinal bins for just the (sub-)tropics bins <- lat_bins_area(n = 6, min = -30, max = 30) # Generate latitudinal bins and a plot bins <- lat_bins_area(n = 24, plot = TRUE)"},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate equal-width latitudinal bins — lat_bins_degrees","title":"Generate equal-width latitudinal bins — lat_bins_degrees","text":"function generate latitudinal bins given size user-defined latitudinal range. desired size bins compatible defined latitudinal range, bin size can updated nearest integer divisible range.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate equal-width latitudinal bins — lat_bins_degrees","text":"","code":"lat_bins_degrees(size = 10, min = -90, max = 90, fit = FALSE, plot = FALSE)"},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate equal-width latitudinal bins — lat_bins_degrees","text":"size numeric. single numeric value defining width latitudinal bins. value must 0, less equal 90 (defaults 10). min numeric. single numeric value defining lower limit latitudinal range (defaults -90). max numeric. single numeric value defining upper limit latitudinal range (defaults 90). fit logical. bin size checked ensure entire latitudinal range covered? fit = TRUE, bin size set nearest integer divisible user-input range. fit = FALSE, bin size divisible range, upper part latitudinal range missing. plot logical. plot latitudinal bins generated? TRUE, plot generated. Defaults FALSE.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_degrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate equal-width latitudinal bins — lat_bins_degrees","text":"dataframe latitudinal bins user-defined size. data.frame contains following columns: bin (bin number), min (minimum latitude bin), mid (midpoint latitude bin), max (maximum latitude bin).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_degrees.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Generate equal-width latitudinal bins — lat_bins_degrees","text":"Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_degrees.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Generate equal-width latitudinal bins — lat_bins_degrees","text":"Bethany Allen","code":""},{"path":[]},{"path":"https://palaeoverse.palaeoverse.org/reference/lat_bins_degrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate equal-width latitudinal bins — lat_bins_degrees","text":"","code":"# Generate 20 degrees latitudinal bins bins <- lat_bins_degrees(size = 20)  # Generate latitudinal bins with closest fit to 13 degrees bins <- lat_bins_degrees(size = 13, fit = TRUE) #> Bin size set to 12 degrees to fit latitudinal range.  # Generate latitudinal bins for defined latitudinal range bins <- lat_bins_degrees(size = 10, min = -50, max = 50)"},{"path":"https://palaeoverse.palaeoverse.org/reference/look_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Look up geological intervals and assign geological stages — look_up","title":"Look up geological intervals and assign geological stages — look_up","text":"function uses interval names assign either international geological stages numeric ages International Commission Stratigraphy (ICS), user-defined intervals, fossil occurrences.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/look_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look up geological intervals and assign geological stages — look_up","text":"","code":"look_up(   occdf,   early_interval = \"early_interval\",   late_interval = \"late_interval\",   int_key = FALSE,   assign_with_GTS = \"GTS2020\",   return_unassigned = FALSE )"},{"path":"https://palaeoverse.palaeoverse.org/reference/look_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look up geological intervals and assign geological stages — look_up","text":"occdf data.frame. dataframe fossil occurrences geological data, columns class character specifying earliest latest possible interval associated occurrence. early_interval character. Name column occdf contains earliest interval occurrences . Defaults \"early_interval\". late_interval character. Name column occdf contains latest interval occurrences . Defaults \"late_interval\". int_key data.frame. dataframe linking interval names international geological stage names ICS, , user-defined intervals. dataframe contain following named columns containing character values: interval_name contains names matched occdf early_stage contains names earliest stages corresponding intervals late_stage contains latest stage corresponding intervals Optionally, named numeric columns provide maximum minimum ages intervals: max_ma min_ma set FALSE (default), stages numerical ages can assigned based one GTS tables (see ). assign_with_GTS character FALSE. Allows intervals searched GTS2020 (default) GTS2012 table. Set FALSE disable. return_unassigned logical. Return interval names assigned, instead dataframe assignments. Defaults FALSE.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/look_up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Look up geological intervals and assign geological stages — look_up","text":"dataframe original input data following appended columns returned: early_stage late_stage, corresponding earliest latest international geological stage assigned occurrences based given interval names. interval_max_ma interval_min_ma return maximum minimum interval ages provided interval key, can fetched GTS2012 GTS2020. column interval_mid_ma appended provide midpoint ages intervals.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/look_up.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Look up geological intervals and assign geological stages — look_up","text":"int_key set FALSE (default), function can used assign numerical ages solely based stages GTS table, assign stages based GTS interval names. Instead  geological stages, user can supply names early_stage late_stage column int_key. assign_with_GTS set FALSE. exemplary int_key included within package (interval_key). key works well assigning geological stages many intervals Paleobiology Database PaleoReefs Database. palaeoverse guarantee stage assignments exemplary key accurate. table corresponding key can loaded palaeoverse::interval_key.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/look_up.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Look up geological intervals and assign geological stages — look_up","text":"Kilian Eichenseer & William Gearty","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/look_up.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Look up geological intervals and assign geological stages — look_up","text":"Lewis . Jones & Christopher D. Dean","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/look_up.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Look up geological intervals and assign geological stages — look_up","text":"","code":"## Just use GTS2020 (default): # create exemplary dataframe taxdf <- data.frame(name = c(\"A\", \"B\", \"C\"), early_interval = c(\"Maastrichtian\", \"Campanian\", \"Sinemurian\"), late_interval = c(\"Maastrichtian\", \"Campanian\", \"Bartonian\")) # assign stages and numerical ages taxdf <- look_up(taxdf)  ## Use exemplary int_key # Get internal reef data occdf <- reefs  # assign stages and numerical ages occdf <- look_up(occdf,                 early_interval = \"interval\",                 late_interval = \"interval\",                 int_key = interval_key)  ## Use exemplary int_key and return unassigned # Get internal tetrapod data occdf <- tetrapods # assign stages and numerical ages occdf <- look_up(occdf, int_key = palaeoverse::interval_key) #> Warning: `NA`, `\"\"` or `\" \"` entries from `late_interval` have been #>             filled in with the corresponding `early_interval` entries #> Warning: The following intervals could not be matched with intervals from int_key #>       or GTS: Early Triassic, Late Pennsylvanian, Vokhmian # return unassigned intervals unassigned <- look_up(occdf, int_key = palaeoverse::interval_key,                       return_unassigned = TRUE) #> Warning: `NA`, `\"\"` or `\" \"` entries from `late_interval` have been #>             filled in with the corresponding `early_interval` entries  ## Use own key and GTS2012: # create example data occdf <- data.frame(   stage = c(\"any Permian\", \"first Permian stage\",             \"any Permian\", \"Roadian\")) # create example key interval_key <- data.frame(   interval_name = c(\"any Permian\", \"first Permian stage\"),   early_stage = c(\"Asselian\", \"Asselian\"),   late_stage = c(\"Changhsingian\", \"Asselian\")) # assign stages and numerical ages: occdf <- look_up(occdf,                  early_interval = \"stage\", late_interval = \"stage\",                  int_key = interval_key, assign_with_GTS = \"GTS2012\")"},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Palaeorotate fossil occurrences — palaeorotate","title":"Palaeorotate fossil occurrences — palaeorotate","text":"function estimate palaeocoordinates fossil occurrence data (.e. reconstruct geographic distribution organisms' remains time deposition). occurrence assigned palaeocoordinates based current geographic position age estimate.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Palaeorotate fossil occurrences — palaeorotate","text":"","code":"palaeorotate(   occdf,   lng = \"lng\",   lat = \"lat\",   age = \"age\",   model = \"MERDITH2021\",   method = \"point\",   uncertainty = TRUE,   round = 3 )"},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Palaeorotate fossil occurrences — palaeorotate","text":"occdf data.frame. Fossil occurrences palaeogeographically reconstructed. occdf contain columns longitudinal latitudinal coordinates, well age estimates. age rotation supplied millions years present. lng character. name column wish treated longitude (defaults \"lng\"). lat character. name column wish treated latitude (defaults \"lat\"). age character. name column wish treated age rotation (defaults \"age\"). model character. name(s) Global Plate Model(s) used reconstruct palaeocoordinates. See details available models. method character. Method used calculate palaeocoordinates fossil occurrences. Either \"grid\" use reconstruction files, \"point\" (default) use GPlates API service. See details section specific details. uncertainty logical. uncertainty palaeogeographic reconstructions returned? set TRUE (default), palaeolatitudinal range maximum geographic distance (km) output palaeocoordinates calculated. argument relevant one Global Plate Model specified model. round numeric. Numeric value indicating number decimal places lng, lat age rounded . functionality relevant \"point\" method. Rounding can speed palaeorotation reducing number unique coordinate pairs. Defaults value 3. rounding desired, set value NULL.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Palaeorotate fossil occurrences — palaeorotate","text":"data.frame containing original input occurrence data.frame reconstructed coordinates (.e. \"p_lng\", \"p_lat\"). \"grid\" method also returns age rotation (\"rot_age\") reference coordinates rotated (\"rot_lng\" \"rot_lat\"). one model requested, column containing rotation model used (\"rot_model\") also appended. Otherwise, name model appended name column containing palaeocoordinates (e.g. \"p_lng_GOLONKA\"). uncertainty set TRUE, palaeolatitudinal range (\"range_p_lat\") maximum geographic distance (\"max_dist\") km palaeocoordinates also returned (latter calculated via distGeo).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Palaeorotate fossil occurrences — palaeorotate","text":"function can estimate palaeocoordinates using two different approaches (method): Reconstruction files: \"grid\" method uses reconstruction files Jones & Domeier (2024) spatiotemporally link present-day geographic coordinates age estimates discrete global grid rotated one million-year time steps throughout Phanerozoic (540–0 Ma). , resolution 3 (~119 km spacing) reconstruction files used. files, process used generate , available documented Jones & Domeier (2024). fine-scale spatial analyses conducted, use \"point\" method (see GPlates API ) may preferred (particularly occurrences close plate boundaries). using \"grid\" method, coordinates within grid cell assigned equivalent palaeocoordinates due spatial aggregation. However, approach enables efficient estimation past distribution fossil occurrences. Note: reconstruction file ~45 MB size. GPlates API: \"point\" method uses GPlates Web Service reconstruct palaeocoordinates point data. use method slower \"grid\" method many unique time intervals exist dataset. However, provides palaeocoordinates higher precision. Available models timespan method: \"MERDITH2021\" (Merdith et al., 2021) 0–1000 Ma (point) 0–540 Ma (grid) \"TorsvikCocks2017\" (Torsvik Cocks, 2016) 0–540 Ma (point/grid) \"PALEOMAP\" (Scotese, 2016) 0–1100 Ma (point) 0–540 Ma (grid) \"MATTHEWS2016_pmag_ref\"  (Matthews et al., 2016) 0–410 Ma (grid/point) \"GOLONKA\" (Wright et al., 2013) 0–540 Ma (grid/point)","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Palaeorotate fossil occurrences — palaeorotate","text":"Jones, L.., Domeier, M. Phanerozoic gridded dataset palaeogeographic reconstructions. Sci Data 11, 710 (2024). doi:10.1038/s41597-024-03468-w . Matthews, K.J., Maloney, K.T., Zahirovic, S., Williams, S.E., Seton, M., Müller, R.D. (2016). Global plate boundary evolution kinematics since late Paleozoic. Global Planetary Change, 146, 226-250. doi:10.1016/j.gloplacha.2016.10.002 . Merdith, ., Williams, S.E., Collins, .S., Tetley, M.G., Mulder, J.., Blades, M.L., Young, ., Armistead, S.E., Cannon, J., Zahirovic, S., Müller. R.D. (2021). Extending full-plate tectonic models deep time: Linking Neoproterozoic Phanerozoic. Earth-Science Reviews, 214(103477). doi:10.1016/j.earscirev.2020.103477 . Scotese, C., & Wright, N. M. (2018). PALEOMAP Paleodigital Elevation Models (PaleoDEMs) Phanerozoic. PALEOMAP Project. Torsvik, T. H. & Cocks, L. R. M. Earth History Palaeogeography. Cambridge University Press, 2016. Wright, N., Zahirovic, S., Müller, R. D., & Seton, M. (2013). Towards community-driven paleogeographic reconstructions: integrating open-access paleogeographic paleobiology data plate tectonics. Biogeosciences, 10(3), 1529-1541. doi:10.5194/bg-10-1529-2013 . See GPlates documentation additional information details.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Palaeorotate fossil occurrences — palaeorotate","text":"Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Palaeorotate fossil occurrences — palaeorotate","text":"Kilian Eichenseer, Lucas Buffan & Gearty","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeorotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Palaeorotate fossil occurrences — palaeorotate","text":"","code":"if (FALSE) { # \\dontrun{ #Generic example with a few occurrences occdf <- data.frame(lng = c(2, -103, -66),                 lat = c(46, 35, -7),                 age = c(88, 125, 200))  #Calculate palaeocoordinates using reconstruction files ex1 <- palaeorotate(occdf = occdf, method = \"grid\")  #Calculate palaeocoordinates using the GPlates API ex2 <- palaeorotate(occdf = occdf, method = \"point\")  #Calculate uncertainity in palaeocoordinates from models ex3 <- palaeorotate(occdf = occdf,                     method = \"grid\",                     model = c(\"MERDITH2021\",                               \"GOLONKA\",                               \"PALEOMAP\"),                     uncertainty = TRUE)  #Now with some real fossil occurrence data!  #Grab some data from the Paleobiology Database data(tetrapods)  #Assign midpoint age of fossil occurrence data for reconstruction tetrapods$age <- (tetrapods$max_ma + tetrapods$min_ma)/2  #Rotate the data ex3 <- palaeorotate(occdf = tetrapods)  #Calculate uncertainity in palaeocoordinates from models ex4 <- palaeorotate(occdf = tetrapods,                     model = c(\"MERDITH2021\",                               \"GOLONKA\",                               \"PALEOMAP\"),                     uncertainty = TRUE) } # }"},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeoverse-package.html","id":null,"dir":"Reference","previous_headings":"","what":"palaeoverse: Prepare and Explore Data for Palaeobiological Analyses — palaeoverse-package","title":"palaeoverse: Prepare and Explore Data for Palaeobiological Analyses — palaeoverse-package","text":"Provides functionality support data preparation exploration palaeobiological analyses, improving code reproducibility accessibility. wider aim 'palaeoverse' bring palaeobiological community together establish agreed standards. package currently includes functionality data cleaning, binning (time space), exploration, summarisation visualisation. Reference datasets (.e. Geological Time Scales https://stratigraphy.org/chart) auxiliary functions also provided. Details can found : Jones et al., (2023) doi: 10.1111/2041-210X.14099 .","code":""},{"path":[]},{"path":"https://palaeoverse.palaeoverse.org/reference/palaeoverse-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"palaeoverse: Prepare and Explore Data for Palaeobiological Analyses — palaeoverse-package","text":"Maintainer: Lewis . Jones LewisA.Jones@outlook.com (ORCID) Authors: William Gearty willgearty@gmail.com (ORCID) Bethany J. Allen Bethany.Allen@bsse.ethz.ch (ORCID) Kilian Eichenseer kilian.eichenseer@gmail.com (ORCID) Christopher D. Dean christopherdaviddean@gmail.com (ORCID) Joseph T. Flannery-Sutherland jf15558@bristol.ac.uk (ORCID) contributors: Sofia Galvan sofia.galvan@uvigo.es (ORCID) [contributor] Miranta Kouvari m.kouvari@ucl.ac.uk (ORCID) [contributor] Pedro L. Godoy pedrolorenagodoy@gmail.com (ORCID) [contributor] Cecily Nicholl cecily.nicholl@ucl.ac.uk (ORCID) [contributor] Lucas Buffan lucas.l.buffan@gmail.com (ORCID) [contributor] Erin M. Dillon emdillon23@gmail.com (ORCID) [contributor] . Alessandro Chiarenza .chiarenza15@gmail.com (ORCID) [contributor]","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/phylo_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check phylogeny tip names — phylo_check","title":"Check phylogeny tip names — phylo_check","text":"function check list tip names phylogeny vector taxon names, desired, trim phylogeny include taxon names within vector.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/phylo_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check phylogeny tip names — phylo_check","text":"","code":"phylo_check(tree = NULL, list = NULL, out = \"full_table\", sort = \"presence\")"},{"path":"https://palaeoverse.palaeoverse.org/reference/phylo_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check phylogeny tip names — phylo_check","text":"tree phylo. phylo object containing phylogeny. list character. vector taxon names. Binomials can separated either space underscore. names contain punctuation. character. Determine whether return either dataframe describing taxa included included tree (\"full_table\", default), table taxa included tree list removed (\"diff_table\"), counts taxa included included tree (\"counts\"), phylogeny trimmed include taxa provided list (\"tree\"). sort character. = \"full_table\" = \"diff_table\", sort names presence tree (\"presence\", default), alphabetically (\"az\").","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/phylo_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check phylogeny tip names — phylo_check","text":"= \"full_table\", dataframe describing whether taxon names present list /tree. = \"diff_table\", dataframe describing taxon names present list tree, . = \"counts\", summary table containing number taxa list tree, tree list, . = \"tree\", phylo object consisting input phylogeny trimmed include tips present list.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/phylo_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check phylogeny tip names — phylo_check","text":"Phylogenies can read R .txt .tree files containing Newick formatted tree using ape::read.tree(), can saved files using ape::write.tree(). = \"tree\", tips trimmed using ape::drop.tip(); tree ultrametric (.e. tip dates ), recommend using paleotree::fixRootTime() readjust branch lengths following pruning.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/phylo_check.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Check phylogeny tip names — phylo_check","text":"Bethany Allen","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/phylo_check.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Check phylogeny tip names — phylo_check","text":"William Gearty & Pedro Godoy","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/phylo_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check phylogeny tip names — phylo_check","text":"","code":"# track user par oldpar <- par(no.readonly = TRUE) #Read in example tree of ceratopsians from paleotree library(paleotree) data(RaiaCopesRule) #Set smaller margins for plotting par(mar = rep(0.5, 4)) plot(ceratopsianTreeRaia)   #Specify list of names dinosaurs <- c(\"Nasutoceratops_titusi\", \"Diabloceratops_eatoni\", \"Zuniceratops_christopheri\", \"Psittacosaurus_major\", \"Psittacosaurus_sinensis\", \"Avaceratops_lammersi\", \"Xenoceratops_foremostensis\", \"Leptoceratops_gracilis\", \"Triceratops_horridus\", \"Triceratops_prorsus\")  #Table of taxon names in list, tree or both ex1 <- phylo_check(tree = ceratopsianTreeRaia, list = dinosaurs)  #Counts of taxa in list, tree or both ex2 <- phylo_check(tree = ceratopsianTreeRaia, list = dinosaurs,                    out = \"counts\")  #Trim tree to tips in the list my_ceratopsians <- phylo_check(tree = ceratopsianTreeRaia, list = dinosaurs, out = \"tree\") plot(my_ceratopsians)  # reset user par par(oldpar)"},{"path":"https://palaeoverse.palaeoverse.org/reference/reefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset: Phanerozoic reefs from the PaleoReefs Database — reefs","title":"Example dataset: Phanerozoic reefs from the PaleoReefs Database — reefs","text":"dataset Phanerozoic reef occurrences PaleoReefs Database (PARED). example dataset includes subset available data PARED, can used demonstrate functions palaeoverse package might applied.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/reefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset: Phanerozoic reefs from the PaleoReefs Database — reefs","text":"","code":"reefs"},{"path":"https://palaeoverse.palaeoverse.org/reference/reefs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset: Phanerozoic reefs from the PaleoReefs Database — reefs","text":"data frame 4363 rows 14 variables: r_number Reference number given particular fossil reef PARED name Reference name given particular fossil reef PARED formation geological formation fossil reef belongs system stratigraphic system fossil reef belongs series stratigraphic series fossil reef belongs interval stratigraphic interval fossil reef belongs biota_main main biota present within fossil reef biota_sec secondary biota present within fossil reef lng modern-day longitude fossil reef lat modern-day latitude fossil reef country country ocean fossil reef located authors authors publication documenting fossil reef title title publication documenting fossil reef year year publication documenting fossil reef","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/reefs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataset: Phanerozoic reefs from the PaleoReefs Database — reefs","text":"Compiled Lewis . Jones. Downloaded 25th July 2022. doi:10.5281/zenodo.6037852","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/reefs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example dataset: Phanerozoic reefs from the PaleoReefs Database — reefs","text":"Kiessling, W. & Krause, M. C. (2022). PaleoReefs Database (PARED) (1.0) Data set. doi:10.5281/zenodo.6037852","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomic spell check — tax_check","title":"Taxonomic spell check — tax_check","text":"function check count potential spelling variations taxon. Spelling variations checked within alphabetical groups (default), within higher taxonomic groups provided.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomic spell check — tax_check","text":"","code":"tax_check(   taxdf,   name = \"genus\",   group = NULL,   dis = 0.05,   start = 1,   verbose = TRUE )"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taxonomic spell check — tax_check","text":"taxdf data.frame. dataframe named columns containing taxon names (e.g. \"species\", \"genus\"). optional column containing groups (e.g. \"family\", \"order\") taxon names belong may also provided (see group details). NA values empty strings name group columns (.e. \"\" \" \") ignored. name character. column name taxon names wish check (e.g. \"genus\"). group character. column name higher taxonomic assignments taxdf wish group . NULL (default), name comparison conducted within alphabetical groups. dis numeric. dissimilarity threshold: value greater 0 (completely dissimilar), less 1 (completely similar). Potential synonyms threshold returned. value set 0.05 default, user might wish experiment value specific data. start numeric. number shared characters beginning potential synonyms match. Potential synonyms value returned. default value set 1 (.e. first letter synonyms must match). verbose logical. results non-letter character check reported user? TRUE, result reported characters detected taxon names.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taxonomic spell check — tax_check","text":"verbose = TRUE (default), list three elements. first element list (synonyms) data.frame row reporting pair potential synonyms. first column \"group\" contains higher group occur (alphabetical groupings group provided). second column \"greater\" contains common synonym pair. third column \"lesser\" contains least common synonym pair. third fourth column (count_greater, count_lesser) contain respective counts synonym pair. matches found filtering arguments, element NULL instead. second element (non_letter_name) vector taxon names contain non-letter characters, NULL none detected. third element (non_letter_group) vector taxon groups contain non-letter characters, NULL none detected. verbose = FALSE, data.frame described returned, NULL matches found.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Taxonomic spell check — tax_check","text":"higher taxonomy provided, entries missing, comparisons still made within alphabetical groups taxa lack higher taxonomic affiliations. function also performs check non-letter characters expected present correctly-formatted taxon names. detection may made available user via verbose argument. Comparisons performed using Jaro dissimilarity metric via stringdist::stringdistmatrix(). string distance metrics rely approximate string matching, different metrics can produce different results. function uses Jaro distance designed short, typed strings mind, good practice include comparisons using multiple metrics, ultimately specific taxonomic vetting possible. complete implementation workflow cleaning taxonomic occurrence data available fossilbrush R package CRAN.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":"reference","dir":"Reference","previous_headings":"","what":"Reference","title":"Taxonomic spell check — tax_check","text":"van der Loo, M. P. J. (2014). stringdist package approximate string matching. R Journal 6, 111-122.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Taxonomic spell check — tax_check","text":"Joseph T. Flannery-Sutherland & Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Taxonomic spell check — tax_check","text":"Lewis . Jones, Kilian Eichenseer & Christopher D. Dean","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taxonomic spell check — tax_check","text":"","code":"if (FALSE) { # \\dontrun{ # load occurrence data data(\"tetrapods\") # Check taxon names alphabetically ex1 <- tax_check(taxdf = tetrapods, name = \"genus\", dis = 0.1) # Check taxon names by group ex2 <- tax_check(taxdf = tetrapods, name = \"genus\",                  group = \"family\", dis = 0.1) } # }"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_lat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pseudo-occurrences from latitudinal range data — tax_expand_lat","title":"Generate pseudo-occurrences from latitudinal range data — tax_expand_lat","text":"function generate pseudo-occurrences taxa based latitudinal ranges (e.g. output 'lat' method tax_range_space). resulting pseudo-occurrences treated equivalent actual occurrence data (e.g. like Paleobiology Database), pseudo-occurrences may useful  performing statistical analyses row representing taxon must replicated latitudinal bin taxon ranges.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_lat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pseudo-occurrences from latitudinal range data — tax_expand_lat","text":"","code":"tax_expand_lat(taxdf, bins, max_lat = \"max_lat\", min_lat = \"min_lat\")"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_lat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pseudo-occurrences from latitudinal range data — tax_expand_lat","text":"taxdf dataframe. dataframe taxa (output 'lat' method tax_range_space) columns containing latitudinal range data (maximum minimum latitude). Column names assumed \"max_lat\" \"min_lat\", may updated via max_lat min_lat arguments. row represent unique taxon. Additional columns may included (e.g. taxon names, additional taxonomy, etc) included returned data.frame. bins dataframe. dataframe bins wish allocate fossil occurrences , returned lat_bins. dataframe must contain least following named columns: \"bin\", \"max\" \"min\". max_lat character. name column wish treated maximum latitude latitudinal range (e.g. \"max_lat\"). min_lat character. name column wish treated minimum latitude latitudinal range (e.g. \"min_lat\").","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_lat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pseudo-occurrences from latitudinal range data — tax_expand_lat","text":"dataframe row represents latitudinal bin taxon ranges . columns identical user-supplied data additional columns included identify bins. Output returned order supplied bins.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_lat.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Generate pseudo-occurrences from latitudinal range data — tax_expand_lat","text":"Lewis . Jones & William Gearty","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_lat.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Generate pseudo-occurrences from latitudinal range data — tax_expand_lat","text":"Christopher D. Dean","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_lat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate pseudo-occurrences from latitudinal range data — tax_expand_lat","text":"","code":"bins <- lat_bins_degrees() taxdf <- data.frame(name = c(\"A\", \"B\", \"C\"),                     max_lat = c(60, 20, -10),                     min_lat = c(20, -40, -60)) ex <- tax_expand_lat(taxdf = taxdf,                      bins = bins,                      max_lat = \"max_lat\",                      min_lat = \"min_lat\")"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pseudo-occurrences from temporal range data — tax_expand_time","title":"Generate pseudo-occurrences from temporal range data — tax_expand_time","text":"function generate interval-level pseudo-occurrences taxa based temporal ranges (e.g. output tax_range_time). resulting pseudo-occurrences treated equivalent actual occurrence data (e.g. like Paleobiology Database), pseudo-occurrences may useful performing statistical analyses row representing taxon must replicated interval taxon persisted.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pseudo-occurrences from temporal range data — tax_expand_time","text":"","code":"tax_expand_time(   taxdf,   max_ma = \"max_ma\",   min_ma = \"min_ma\",   bins = NULL,   scale = \"GTS2020\",   rank = \"stage\",   ext_orig = TRUE )"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pseudo-occurrences from temporal range data — tax_expand_time","text":"taxdf dataframe. dataframe taxa (produced tax_range_time) columns maximum minimum ages (FADs LADs). row represent unique taxon. Additional columns may included (e.g. taxon names, additional taxonomy, etc) included returned data.frame. required, numeric ages can generated interval names via look_up function. max_ma character. name column wish treated maximum limit (FADs) age range (e.g. \"max_ma\"). min_ma character. name column wish treated minimum limit (LADs) age range (e.g. \"min_ma\"). bins dataframe. dataframe bins wish allocate pseudo-occurrences returned time_bins(). dataframe must contain least following named columns: \"bin\", \"max_ma\" \"min_ma\". Columns \"max_ma\" \"min_ma\" must numeric values. scale character. Specify desired geological timescale used, either \"GTS2020\" \"GTS2012\". Passed time_bins() bins specified. rank character. Specify desired stratigraphic rank. Choose : \"stage\", \"epoch\", \"period\", \"era\", \"eon\". Passed time_bins() bins specified. ext_orig logical. two additional columns added identify intervals taxa originated went extinct?","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pseudo-occurrences from temporal range data — tax_expand_time","text":"dataframe row represents interval taxon original user-supplied data persisted. columns identical user-supplied data additional columns included identify intervals. ext_orig TRUE, two additional columns added identify intervals taxa originated went extinct.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_time.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Generate pseudo-occurrences from temporal range data — tax_expand_time","text":"William Gearty & Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_time.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Generate pseudo-occurrences from temporal range data — tax_expand_time","text":"Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_expand_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate pseudo-occurrences from temporal range data — tax_expand_time","text":"","code":"taxdf <- data.frame(name = c(\"A\", \"B\", \"C\"),                     max_ma = c(150, 60, 30),                     min_ma = c(110, 20, 0)) ex <- tax_expand_time(taxdf)  bins <- time_bins(scale = \"GTS2012\", rank = \"stage\") ex2 <- tax_expand_time(taxdf, bins = bins)"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the geographic range of fossil taxa — tax_range_space","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"function calculate geographic range fossil taxa occurrence data. function can calculate geographic range four ways: convex hull, latitudinal range, maximum Great Circle Distance, number occupied equal-area hexagonal grid cells.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"","code":"tax_range_space(   occdf,   name = \"genus\",   lng = \"lng\",   lat = \"lat\",   method = \"lat\",   spacing = 100,   coords = FALSE )"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"occdf dataframe. dataframe fossil occurrences. dataframe contain least three columns: names taxa, longitude latitude (see name, lng, lat arguments). name character. name column wish treated input names (e.g. \"species\" \"genus\"). NA data removed prior function call. lng character. name column wish treated input longitude (e.g. \"lng\" \"p_lng\"). NA data removed prior function call. lat character. name column wish treated input latitude (e.g. \"lat\" \"p_lat\"). NA data removed prior function call. method character. geographic range calculated taxon occdf? Four options exist function: \"con\", \"lat\", \"gcd\", \"occ\". See Details description . spacing numeric. desired spacing (km) center adjacent grid cells. required method argument set \"occ\". default 100. coords logical. output coordinates returned \"con\" \"gcd\" method?","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"dataframe method-specific columns: \"con\" method, dataframe unique taxa (taxon) taxon ID (taxon_id) convex hull coordinate (lng & lat) combination, area (area) km2 returned. \"lat\" method, dataframe unique taxa (taxon), taxon ID (taxon_id), maximum latitude occurrence (max_lat), minimum latitude occurrence (min_lat), latitudinal range (range_lat) returned. \"gcd\" method, dataframe unique taxa (taxon) taxon ID (taxon_id) coordinate combination (lng & lat) two distant points, Great Circle Distance (gcd) points km returned. \"occ\" method, dataframe unique taxa (taxon), taxon ID (taxon_id), number occupied cells (n_cells), proportion occupied cells occupied occurrences (proportional_occ), spacing cells (spacing) km returned. Note: number occupied cells proportion occupied cells highly dependent user-defined spacing. \"con\", \"lat\" \"gcd\" method, values zero indicate respective taxon singleton (.e. represented one occurrence).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"Four commonly applied approaches (Darroch et al. 2020) available using tax_range_space function calculating ranges: Convex hull: \"con\" method calculates geographic range taxa using convex hull taxon occdf, calculates area convex hull (km2) using geosphere::areaPolygon(). convex hull method works creating polygon encompasses occurrence points taxon. Latitudinal: \"lat\" method calculates palaeolatitudinal range taxon. taxon occdf finding maximum minimum latitudinal occurrence (input lat). palaeolatitudinal range taxon also calculated (.e. difference minimum maximum latitude). Maximum Great Circle Distance: \"gcd\" method calculates maximum Great Circle Distance occurrences taxon occdf. using geosphere::distHaversine(). function calculates Great Circle Distance using Haversine method radius Earth set 6378.137 km. Great Circle Distance represents shortest distance two points surface sphere. different Euclidean Distance, represents distance two points plane. Occupied cells: \"occ\" method calculates number proportion occupied equal-area grid cells. using discrete hexagonal grids via h3jsr package. package relies Uber's H3 library, geospatial indexing system partitions world hexagonal cells. H3, 16 different resolutions available (see ). implementation tax_range_space() function, resolution defined user-input spacing represents distance centroid adjacent cells. Using distance, function identifies resolution similar input spacing, uses resolution.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":"reference-s-","dir":"Reference","previous_headings":"","what":"Reference(s)","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"Darroch, S. ., Casey, M. M., Antell, G. S., Sweeney, ., & Saupe, E. E. (2020). High preservation potential paleogeographic range size distributions deep time. American Naturalist, 196(4), 454-471.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"Bethany Allen & Christopher D. Dean","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the geographic range of fossil taxa — tax_range_space","text":"","code":"# Grab internal data occdf <- tetrapods[1:100, ] # Remove NAs occdf <- subset(occdf, !is.na(genus)) # Convex hull ex1 <- tax_range_space(occdf = occdf, name = \"genus\", method = \"con\") # Latitudinal range ex2 <- tax_range_space(occdf = occdf, name = \"genus\", method = \"lat\") # Great Circle Distance ex3 <- tax_range_space(occdf = occdf, name = \"genus\", method = \"gcd\") # Occupied grid cells ex4 <- tax_range_space(occdf = occdf, name = \"genus\",                        method = \"occ\", spacing = 500) # Convex hull with coordinates ex5 <- tax_range_space(occdf = occdf, name = \"genus\", method = \"con\", coords = TRUE)"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_strat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a stratigraphic section plot — tax_range_strat","title":"Generate a stratigraphic section plot — tax_range_strat","text":"function plot stratigraphic ranges fossil taxa occurrence data.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_strat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a stratigraphic section plot — tax_range_strat","text":"","code":"tax_range_strat(   occdf,   name = \"genus\",   level = \"bed\",   certainty = NULL,   by = \"FAD\",   plot_args = NULL,   x_args = NULL,   y_args = NULL )"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_strat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a stratigraphic section plot — tax_range_strat","text":"occdf dataframe. dataframe fossil occurrences containing least two columns: names taxa, stratigraphic position (see name level arguments). name character. name column wish treated input names, e.g. \"genus\" (default). level character. name column wish treated stratigraphic levels associated occurrence, e.g. \"bed\" (default) \"height\". Stratigraphic levels must numeric. certainty character. name column wish treated information whether identification certain (1) uncertain (0). default (certainty = NULL), column name provided, occurrences assumed certain. plot, certain occurrences plotted black circle joined solid lines, uncertain occurrences plotted white circle joined dashed lines. character. output sorted? Either: \"FAD\" (first appearance; default), \"LAD\" (last appearance), \"name\" (alphabetically taxon names). plot_args list optional arguments passed directly graphics::plot(). Subsets arguments also passed graphics::segments() graphics::points() (see Details). Useful arguments include xlab (x-axis label), ylab (y-axis label, default \"Bed number\"), main (plot title), xlim (x-axis limits), ylim (y-axis limits). axes type arguments supported overridden. x_args list optional arguments passed directly axis() generating x-axis. Useful arguments include font (e.g., 3 italic) las (label orientation). side argument supported overridden. labels arguments specified, x-axis tick labels set taxon names. y_args list optional arguments passed directly axis() generating y-axis. Useful arguments include font (e.g., 3 italic) las (label orientation). side argument supported overridden. argument specified, set vector unique values level column.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_strat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a stratigraphic section plot — tax_range_strat","text":"Invisibly returns data.frame calculated taxonomic stratigraphic ranges. function usually used side effect, create plot showing stratigraphic ranges taxa section, levels taxon sampled indicated point.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_strat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a stratigraphic section plot — tax_range_strat","text":"Note default spacing x-axis title may cause overlap x-axis tick labels. avoid , can call graphics::title() running tax_range_strat() specify xlab line add x-axis title farther axis (see examples). styling points line segments can adjusted supplying named arguments plot_args. col (segment point color), lwd (segment width), pch (point symbol), bg (background point color values pch), lty (segment line type), cex (point size) supported. case column supplied certainty argument, arguments may vectors length two, case first value vector used \"certain\" points segments, second value vector used \"uncertain\" points segments. single value supplied, used . default values arguments follows: col = c(\"black\", \"black\") lwd = c(1.5, 1.5) pch = c(19, 21) bg = c(\"black\", \"white\") lty = c(1, 2) cex = c(1, 1)","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_strat.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Generate a stratigraphic section plot — tax_range_strat","text":"Bethany Allen, William Gearty & Alexander Dunhill","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_strat.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Generate a stratigraphic section plot — tax_range_strat","text":"William Gearty & Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_strat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a stratigraphic section plot — tax_range_strat","text":"","code":"# Load tetrapod dataset data(tetrapods) # Sample tetrapod occurrences tetrapod_names <- tetrapods$accepted_name[1:50] # Simulate bed numbers beds_sampled <- sample.int(n = 10, size = 50, replace = TRUE) # Simulate certainty values certainty_sampled <- sample(x = 0:1, size = 50, replace = TRUE) # Combine into data frame occdf <- data.frame(taxon = tetrapod_names,                     bed = beds_sampled,                     certainty = certainty_sampled) # Plot stratigraphic ranges par(mar = c(12, 5, 2, 2)) tax_range_strat(occdf, name = \"taxon\")  tax_range_strat(occdf, name = \"taxon\", certainty = \"certainty\",                 plot_args = list(ylab = \"Stratigraphic height (m)\"))  # Plot stratigraphic ranges with more labelling tax_range_strat(occdf, name = \"taxon\", certainty = \"certainty\", by = \"name\",                 plot_args = list(main = \"Section A\",                                  ylab = \"Stratigraphic height (m)\")) eras_custom <- data.frame(name = c(\"Mesozoic\", \"Cenozoic\"),                           max_age = c(0.5, 3.5),                           min_age = c(3.5, 10.5),                           color = c(\"#67C5CA\", \"#F2F91D\")) axis_geo(side = 4, intervals = eras_custom, tick_labels = FALSE) title(xlab = \"Taxon\", line = 10.5)"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the temporal range of fossil taxa — tax_range_time","title":"Calculate the temporal range of fossil taxa — tax_range_time","text":"function calculate temporal range fossil taxa occurrence data.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the temporal range of fossil taxa — tax_range_time","text":"","code":"tax_range_time(   occdf,   name = \"genus\",   min_ma = \"min_ma\",   max_ma = \"max_ma\",   by = \"FAD\",   plot = FALSE,   plot_args = NULL,   intervals = \"periods\" )"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the temporal range of fossil taxa — tax_range_time","text":"occdf dataframe. dataframe fossil occurrences containing least three columns: names taxa, minimum age maximum age (see name, min_ma, max_ma arguments). ages constrain age range fossil occurrence assumed millions years present. name character. name column wish treated input names, e.g. \"genus\" (default). min_ma character. name column wish treated minimum limit age range, e.g. \"min_ma\" (default). max_ma character. name column wish treated maximum limit age range, e.g. \"max_ma\" (default). character. output sorted? Either: \"FAD\" (first-appearance date; default), \"LAD\" (last-appearance data), \"name\" (alphabetically taxon names). plot logical. plot ranges generated? plot_args list. list optional arguments relevant plotting. See Details options. intervals character. time interval information used plot x-axis: either ) character string indicating rank intervals built-GTS2020, B) character string indicating data.frame hosted Macrostrat (see time_bins), C) custom data.frame time interval boundaries (see axis_geo Details). list strings data.frames can supplied add multiple time scales side plot (see axis_geo Details). Defaults \"periods\".","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the temporal range of fossil taxa — tax_range_time","text":"dataframe containing following columns: unique taxa (taxon), taxon ID (taxon_id), first appearance taxon (max_ma), last appearance taxon (min_ma), duration temporal range (range_myr), number occurrences per taxon (n_occ) returned.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the temporal range of fossil taxa — tax_range_time","text":"temporal range(s) taxa calculated extracting unique taxa (name column) input occdf, checking first last appearance. temporal duration taxon also calculated. input data columns contain NAs, must removed prior function call. plot temporal range taxon also returned plot = TRUE. Customisable argument options (.e. graphics::par()) pass plot_args list (defaults) plotting include: xlab = \"Time (Ma)\" ylab = \"Taxon ID\" col = \"black\" bg = \"black\" pch = 20 cex = 1 lty = 1 lwd = 1 Note: function provides output based solely user input data. true duration taxon likely confounded uncertainty dating occurrences, incomplete sampling preservation.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_time.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Calculate the temporal range of fossil taxa — tax_range_time","text":"Lewis . Jones","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_time.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Calculate the temporal range of fossil taxa — tax_range_time","text":"Bethany Allen, Christopher D. Dean & Kilian Eichenseer","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_range_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the temporal range of fossil taxa — tax_range_time","text":"","code":"# Grab internal data occdf <- tetrapods # Remove NAs occdf <- subset(occdf, !is.na(order) & order != \"NO_ORDER_SPECIFIED\") # Temporal range ex <- tax_range_time(occdf = occdf, name = \"order\", plot = TRUE)  # Customise appearance ex <- tax_range_time(occdf = occdf, name = \"order\", plot = TRUE,                      plot_args = list(ylab = \"Orders\",                                       pch = 21, col = \"black\", bg = \"blue\",                                       lty = 2),                      intervals = list(\"periods\", \"eras\"))"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter occurrences to unique taxa — tax_unique","title":"Filter occurrences to unique taxa — tax_unique","text":"function filter list taxonomic occurrences unique taxa predefined resolution. Occurrences identified coarser taxonomic resolution desired level retained belong clade otherwise represented dataset (see details section information). previously described \"cryptic diversity\" (e.g. Mannion et al. 2011).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter occurrences to unique taxa — tax_unique","text":"","code":"tax_unique(   occdf = NULL,   binomial = NULL,   species = NULL,   genus = NULL,   ...,   name = NULL,   resolution = \"species\",   append = FALSE )"},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter occurrences to unique taxa — tax_unique","text":"occdf dataframe. dataframe containing information occurrences taxa filter. binomial character. name column occdf containing genus species names occurrences, either form \"genus species\" \"genus_species\". species character. name column occdf containing species-level identifications (.e. specific epithet). genus character. name column occdf containing genus-level identifications. ... character. named arguments specifying columns higher levels taxonomy (e.g. subfamily, order, superclass). names arguments column names output, values arguments correspond columns occdf. given order arguments order filtered. Therefore, arguments must ascending order lowest highest taxonomic rank (see examples ). least one higher level taxonomy must specified. name character. name column occdf containing taxonomic names mixed taxonomic levels; data column \"accepted_name\" Paleobiology Database occurrence dataframe type. resolution character. taxonomic resolution identify unique occurrences, either \"species\" (default) \"genus\". append logical. original dataframe returned unique names appended new column?","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter occurrences to unique taxa — tax_unique","text":"dataframe taxa, row corresponding unique \"species\" \"genus\" dataset (depending chosen resolution). dataframe include taxonomic information provided function, well column providing 'unique' names taxon. append TRUE, original dataframe (occdf) returned 'unique' names appended new column. Occurrences identified coarse taxonomic resolution belong clade already represented within dataset 'unique' names listed NA.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter occurrences to unique taxa — tax_unique","text":"Palaeobiologists usually count unique taxa retaining unique occurrences identified given taxonomic resolution, however function retains occurrences identified coarser taxonomic resolution already represented within dataset. example, consider following set occurrences: Albertosaurus sarcophagus Ankylosaurus sp. Aves indet. Ceratopsidae indet. Hadrosauridae indet. Ornithomimus sp. Tyrannosaurus rex filter species-level identifications reduce species richness two. However, none clades nested within one another, indeterminately identified occurrences represents least one species already represented dataset. function designed deal taxonomic data, retain seven 'species' example. Taxonomic information supplied within dataframe, columns provide identifications different taxonomic levels. Occurrence data can filtered retain either unique species, unique genera. species-level filter desired, minimum input requires either (1) binomial, (2) species genus, (3) name genus columns entered, well least one column higher taxonomic level. standard Paleobiology Database occurrence dataframe, species names captured 'accepted_name' column, species-level filter use 'genus = \"genus\"' 'name = \"accepted_name\"' arguments. genus-level filter desired, minimum input requires either (1) binomial (2) genus columns entered, well least one column higher taxonomic level. Missing data indicated NAs, although function can handle common labels \"NO_FAMILY_SPECIFIED\" within Paleobiology Database datasets. function matches taxonomic names face value, homonyms may falsely filtered .","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter occurrences to unique taxa — tax_unique","text":"Mannion, P. D., Upchurch, P., Carrano, M. T., Barrett, P. M. (2011). Testing effect rock record diversity: multidisciplinary approach elucidating generic richness sauropodomorph dinosaurs time. Biological Reviews, 86, 157-181. doi:10.1111/j.1469-185X.2010.00139.x .","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Filter occurrences to unique taxa — tax_unique","text":"Bethany Allen & William Gearty","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Filter occurrences to unique taxa — tax_unique","text":"Lewis . Jones & William Gearty","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tax_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter occurrences to unique taxa — tax_unique","text":"","code":"#Retain unique species occdf <- tetrapods[1:100, ] species <- tax_unique(occdf = occdf, genus = \"genus\", family = \"family\", order = \"order\", class = \"class\", name = \"accepted_name\")  #Retain unique genera genera <- tax_unique(occdf = occdf, genus = \"genus\", family = \"family\", order = \"order\", class = \"class\", resolution = \"genus\")  #Append unique names to the original occurrences genera_append <- tax_unique(occdf = occdf, genus = \"genus\", family = \"family\", order = \"order\", class = \"class\", resolution = \"genus\", append = TRUE)  #Create dataframe from lists occdf2 <- data.frame(species = c(\"rex\", \"aegyptiacus\", NA), genus = c(\"Tyrannosaurus\", \"Spinosaurus\", NA), family = c(\"Tyrannosauridae\", \"Spinosauridae\", \"Diplodocidae\")) dinosaur_species <- tax_unique(occdf = occdf2, species = \"species\", genus = \"genus\", family = \"family\")  #Retain unique genera per collection with group_apply genera <- group_apply(occdf = occdf,                      group = c(\"collection_no\"),                      fun = tax_unique,                      genus = \"genus\",                      family = \"family\",                      order = \"order\",                      class = \"class\",                      resolution = \"genus\")"},{"path":"https://palaeoverse.palaeoverse.org/reference/tetrapods.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset: Early tetrapod data from the Paleobiology Database — tetrapods","title":"Example dataset: Early tetrapod data from the Paleobiology Database — tetrapods","text":"dataset tetrapod occurrences ranging Carboniferous Early Triassic, Palaeobiology Database. Dataset includes range variables relevant common palaeobiological analyses, relating identification, geography, environmental context, traits . Additional information can found . downloaded data unaltered, exception removing superfluous variables, can used demonstrate functions palaeoverse package might applied.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tetrapods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset: Early tetrapod data from the Paleobiology Database — tetrapods","text":"","code":"tetrapods"},{"path":"https://palaeoverse.palaeoverse.org/reference/tetrapods.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset: Early tetrapod data from the Paleobiology Database — tetrapods","text":"data frame 5270 rows 32 variables: occurrence_no Reference number given particular occurrence Paleobiology Database collection_no Reference number given Paleobiology Database collection (locality) occurrence belongs identified_name Taxon name appears original publication, may include expressions uncertainty (e.g. \"cf.\", \"aff.\", \"?\") novelty (e.g. \"n. gen.\", \"n. sp.\") identified_rank taxonomic rank, resolution, identified name accepted_name Taxon name identified name passed Paleobiology Database's internal taxonomy, collapses synonyms, amends binomials altered (e.g. species moving another genus) updates taxa longer valid (e.g. nomina dubia) accepted_rank taxonomic rank, resolution, accepted name early_interval oldest () time interval within occurrence thought deposited late_interval youngest time interval within occurrence thought deposited max_ma, min_ma age range given occurrence phylum, class, order, family, genus taxa (decreasing taxonomic level) occurrence identified belonging abund_value, abund_unit number (units) fossils attributed occurrence lng, lat modern-day longitude latitude fossil locality collection_name name Paleobiology Database collection occurrence belongs , typically spatio-temporally restricted locality cc country (code) fossils discovered formation, stratgroup, member geological units fossils collected zone biozone occurrence attributed lithology1 main lithology beds section fossils collected environment inferred environmental conditions place deposition pres_mode mode preservation fossils found collection (necessarily specific occurrence), include information whether body trace fossils taxon_environment environment within taxon thought lived, collated within Paleobiology Database motility, life_habit, diet Various types trait data taxon, collated within Paleobiology Database","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tetrapods.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataset: Early tetrapod data from the Paleobiology Database — tetrapods","text":"Compiled Bethany Allen, current version downloaded 14th July 2022. See item descriptions details.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/tetrapods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example dataset: Early tetrapod data from the Paleobiology Database — tetrapods","text":"Uhen MD et al. (2023). Paleobiology Database User Guide Version 1.0. PaleoBios, 40 (11). doi:10.5070/P9401160531 .","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate time bins — time_bins","title":"Generate time bins — time_bins","text":"function generate time bins given study interval geological timescale. function flexible either stage-level higher stratigraphic-level (e.g. period) time bins can called, valid timescales Macrostrat can used, data.frame geological timescale can provided. addition, near equal-length time bins can generated grouping intervals together. example, target bin size 10 Myr, function generate bins mean bin length close 10 Myr. Similarly, specified number bins (n_bins), function generate number bins bin duration uniform possible. However, users may also want consider grouping stages based reasoning e.g. availability outcrop (see Dean et al. 2020).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate time bins — time_bins","text":"","code":"time_bins(   interval = \"Phanerozoic\",   rank = \"stage\",   size = NULL,   n_bins = NULL,   assign = NULL,   scale = \"GTS2020\",   plot = FALSE )"},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate time bins — time_bins","text":"interval character numeric. Interval name available GTS2020 GTS2012. single interval name provided, interval returned. two interval names provided, intervals existing returned. single numeric age provided, interval covers age returned. two numeric ages provided, intervals occurring range ages returned. Defaults \"Phanerozoic\". argument ignored scale \"GTS2020\" \"GTS2012\". rank character. stratigraphic rank desired? Choose : \"stage\", \"epoch\", \"period\", \"era\", \"eon\". argument ignored scale \"GTS2020\" \"GTS2012\". size numeric. equal-length time bins desired, specify length millions years (Myr) time bins desired. n_bins numeric. equal-length time bins, fixed number time bins can specified instead bin size. argument ignored size specified. assign numeric. numeric vector age estimates use assign requested bins. assign specified, numeric vector returned midpoint age specified bins. Note simplified approach assignment palaeoverse included data 'known' point-age estimates. wider range binning methods, see palaeoverse::bin_time(). scale character data.frame. Specify desired geological timescale used: \"GTS2020\" (default), \"GTS2012\", valid timescale Macrostrat, user-input data.frame. data.frame provided, must contain least following named columns: \"interval_name\", \"max_ma\", \"min_ma\". , age data provided Ma. plot logical. plot time bins generated?","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate time bins — time_bins","text":"data.frame time bins specified intervals list data.frame time bins named numeric vector (bin number) binned age estimates (midpoint specified bins) assign specified. default, time bins data.frame contains following columns: bin, interval_name, rank, max_ma, mid_ma, min_ma, duration_myr, abbr (interval abbreviation), colour font (colour). size n_bins specified, time bins data.frame contains following columns: bin, max_ma, mid_ma, min_ma, duration_myr, grouping_rank, intervals, colour font.","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate time bins — time_bins","text":"function uses either Geological Time Scale 2020, Geological Time Scale 2012, valid timescale Macrostrat, user-input data.frame (see scale argument) generate time bins. Note, timescales Macrostrat tend contain --date information (e.g. Geological Time Scale). Additional information included Geological Time Scales source can accessed via: GTS2020 GTS2012 Available interval names accessible via interval_name column GTS2012 GTS2020. Data Geological Timescale 2020 2012 compiled Lewis . Jones (2022-07-02).","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate time bins — time_bins","text":"Dean, C.D., Chiarenza, .. Maidment, S.C., 2020. Formation binning: new method increased temporal resolution regional studies, applied Late Cretaceous dinosaur fossil record North America. Palaeontology, 63(6), 881-901. doi:10.1111/pala.12492 .","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":"developer-s-","dir":"Reference","previous_headings":"","what":"Developer(s)","title":"Generate time bins — time_bins","text":"Lewis . Jones & Kilian Eichenseer","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":"reviewer-s-","dir":"Reference","previous_headings":"","what":"Reviewer(s)","title":"Generate time bins — time_bins","text":"Kilian Eichenseer & William Gearty","code":""},{"path":"https://palaeoverse.palaeoverse.org/reference/time_bins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate time bins — time_bins","text":"","code":"#Using numeric age ex1 <- time_bins(interval = 10, plot = TRUE)   #Using numeric age range ex2 <- time_bins(interval = c(50, 100), plot = TRUE)   #Using a single interval name ex3 <- time_bins(interval = c(\"Maastrichtian\"), plot = TRUE)   #Using a range of intervals and near-equal duration bins ex4 <- time_bins(interval = c(\"Fortunian\", \"Meghalayan\"),                  size = 10, plot = TRUE) #> Target duration of equal length time bins was set to 10 Myr. #> 54 time bins were generated with a mean length of 10.02 Myr and a standard deviation of 2.4 Myr.   #Assign bins based on given age estimates ex5 <- time_bins(interval = c(\"Fortunian\", \"Meghalayan\"),                  assign = c(232, 167, 33))  #Use user-input data.frame to generate near-equal length bins scale <- data.frame(interval_name = 1:5,                     min_ma = c(0, 18, 32, 38, 45),                     max_ma = c(18, 32, 38, 45, 53)) ex6 <- time_bins(scale = scale, size = 20, plot = TRUE) #> Target duration of equal length time bins was set to 20 Myr. #> 3 time bins were generated with a mean length of 17.67 Myr and a standard deviation of 2.52 Myr.   #Use North American land mammal ages from Macrostrat and specify a desired #number of bins ex7 <- time_bins(scale = \"North American land mammal ages\", n_bins = 7) #> Number of equal length time bins was set to 7. #> 7 time bins were generated with a mean length of 9.43 Myr and a standard deviation of 1.19 Myr."},{"path":"https://palaeoverse.palaeoverse.org/news/index.html","id":"palaeoverse-140","dir":"Changelog","previous_headings":"","what":"palaeoverse 1.4.0","title":"palaeoverse 1.4.0","text":"CRAN release: 2024-10-14 Mantle reference frame models removed TorsvikCocks2017 model added Added updated reconstruction files (1 myr resolution) Fixed point plotting bug tax_range_strat Added lat_bins_area (#114) Replaced lat_bins lat_bins_degrees Made functions tibble-friendly (#118)","code":""},{"path":"https://palaeoverse.palaeoverse.org/news/index.html","id":"palaeoverse-130","dir":"Changelog","previous_headings":"","what":"palaeoverse 1.3.0","title":"palaeoverse 1.3.0","text":"CRAN release: 2024-04-16 Added plot customisability tax_range_time (#99) Update palaeorotate handle updates GPlates API (#112) New function create stratigraphic range plots, tax_range_strat (#97) Added age arguments (max_ma/min_ma) bin_time (#106) Added warning bin_time (#104) Improved link accessibility (#88) Fix superfluous columns palaeorotate (#110)","code":""},{"path":"https://palaeoverse.palaeoverse.org/news/index.html","id":"palaeoverse-121","dir":"Changelog","previous_headings":"","what":"palaeoverse 1.2.1","title":"palaeoverse 1.2.1","text":"CRAN release: 2023-08-17 Fixed handling multiple models palaeorotate (#92) Fixed custom ticks behavior axis_geo_phylo Added ability use custom bins tax_expand_time (#94)","code":""},{"path":"https://palaeoverse.palaeoverse.org/news/index.html","id":"palaeoverse-120","dir":"Changelog","previous_headings":"","what":"palaeoverse 1.2.0","title":"palaeoverse 1.2.0","text":"CRAN release: 2023-04-18 time_bins updated enable users call geological time scales Macrostrat Fixed minor documentation error tax_range_time Fixed unnecessary column output palaeorotate (#78) Fixed binding issues “point” method palaeorotate specific datasets (#78) Removed deeptime dependency Updated font colors GTS2012 GTS2020 based background luminance Fixed multi-model call palaeorotate “point” method return requested model coordinates (#82) Fixed erroneous entry interval_key (#84) Added two tutorial vignettes (#31) Fixed tax_range_space bug custom column names","code":""},{"path":"https://palaeoverse.palaeoverse.org/news/index.html","id":"palaeoverse-111","dir":"Changelog","previous_headings":"","what":"palaeoverse 1.1.1","title":"palaeoverse 1.1.1","text":"CRAN release: 2023-02-16 palaeoverse now requires deeptime (>= 1.0.0) Added additional test catch Zenodo offline (palaeorotate) Added coords argument tax_range_space function control whether coordinates returned palaeorotate documentation updated reflect updates GPlates Web Service (#74) MULLER2022 plate rotation model made available palaeorotate (#74) model argument palaeorotate now allows multiple models called - palaeogeographic uncertainty now calculated requested models max distance calculations palaeorotate’s uncertainty functionality updated use geosphere::distGeo","code":""},{"path":"https://palaeoverse.palaeoverse.org/news/index.html","id":"palaeoverse-110","dir":"Changelog","previous_headings":"","what":"palaeoverse 1.1.0","title":"palaeoverse 1.1.0","text":"CRAN release: 2023-01-12 Updates Added package-level documentation function bin_time now accepts user-defined probability function (#20) lat_bins now accepts user-defined latitudinal range (#23) bin_lat now functionality handling boundary occurrences (#23) tax_unique now supports arbitrary higher taxonomic levels (#52) time_bins now supports user input dataframes (#19) tax_unique now supports returning unique names appended input dataframe (#51) Minor bug fixes Updated palaeorotate reconstruction files use hexagonal equal-area grid (#59) Added error handling GPlates Zenodo offline Added default value round argument palaeorotate Resolved issue chunk processing palaeorotate Fixed behavior time_bins(scale = “GTS2012”) (#62) Fixed tests suggested packages installed (#64) Removed dependence tests divDyn deeptime (#64) Fixed tax_range_time example (#60) Fixed look_up issue handling pre-Cambrian occurrences (#63) tax_unique now retains homonyms different higher taxonomic groups (#50) Fixed axis_geo phylogenies (#68)","code":""},{"path":"https://palaeoverse.palaeoverse.org/news/index.html","id":"palaeoverse-100","dir":"Changelog","previous_headings":"","what":"palaeoverse 1.0.0","title":"palaeoverse 1.0.0","text":"CRAN release: 2022-10-31 First full release palaeoverse R package. package provides functions help streamline analyses improve code readability reproducibility.","code":""}]
